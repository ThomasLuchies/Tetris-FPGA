/*
 * "Small Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It requires a STDOUT  device in your system's hardware.
 *
 * The purpose of this example is to demonstrate the smallest possible Hello
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete
 * description.
 *
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 *
 *    - Set the Optimization Level to -Os
 *
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 *
 *    - Set the Optimization Level to -Os
 *
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION
 *      This removes software exception handling, which means that you cannot
 *      run code compiled for Nios II cpu with a hardware multiplier on a core
 *      without a the multiply unit. Check the Nios II Software Developers
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks
 *      support for buffering, file IO, floating point and getch(), etc.
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "io.h"
#include <unistd.h>
#include "altera_avalon_pio_regs.h"
#include <stdlib.h>
#include <stdint.h>

int grid[24][10];

int main()
{
  int rowAdresses[24] = {ROW_0_BASE, ROW_1_BASE, ROW_2_BASE, ROW_3_BASE, ROW_4_BASE, ROW_5_BASE, ROW_6_BASE, ROW_7_BASE, ROW_8_BASE, ROW_9_BASE, ROW_10_BASE, ROW_11_BASE, ROW_12_BASE, ROW_13_BASE, ROW_14_BASE, ROW_15_BASE, ROW_16_BASE, ROW_17_BASE, ROW_18_BASE, ROW_19_BASE, ROW_20_BASE, ROW_21_BASE, ROW_22_BASE, ROW_23_BASE};
  unsigned char rowArray[30];
  char binString = "010000000000000000000000000000";
  uint32_t test;

  clearGrid();
  test |= (1 << 0);
  test |= (0 << 1);
  test |= (0 << 2);
  test |= (0 << 3);
  test |= (1 << 4);
  test |= (0 << 5);
	test |= (0 << 6);
	test |= (0 << 7);
	test |= (0 << 8);
	test |= (0 << 9);
	test |= (0 << 10);
	test |= (0 << 11);
	test |= (0 << 12);
	test |= (0 << 13);
	test |= (0 << 14);
	test |= (0 << 15);
	test |= (0 << 16);
	test |= (1 << 17);
	test |= (0 << 18);
	test |= (0 << 19);
	test |= (0 << 20);
	test |= (0 << 21);
	test |= (0 << 22);
	test |= (0 << 23);
	test |= (0 << 24);
	test |= (0 << 25);
	test |= (0 << 26);
	test |= (0 << 27);
	test |= (0 << 28);
	test |= (0 << 29);
	test |= (0 << 30);
	test |= (0 << 31);

  /* Event loop never exits. */
  while (1)
  {
	  grid[0][5] = 2;

	  printf("Binary : ");
	  printBinary(test);
	  printf("\n");
/*	  for(int y = 0; y < 23; y++)
	  {
		  for(int x = 0; x < 9; x++)
		  {
			  rowArray[3 * x] = grid[y][x] & 0x07;
			  if(grid[y][x] != 0)
			  {
				  printf("x: %d, y: %d, rowAdress %\n", x, y, rowAdresses[y]);
			  }
		  }

		  IOWR_ALTERA_AVALON_PIO_DATA(rowAdresses[y], rowArray);
	  }*/
	  //IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE));
	  IOWR_ALTERA_AVALON_PIO_DATA(rowAdresses[0], test);
	  IOWR_ALTERA_AVALON_PIO_DATA(ROW_1_BASE, 0b010010000000000000000000000000);
	  IOWR_ALTERA_AVALON_PIO_DATA(ROW_2_BASE, 0b00010000000000000000000000000000);
	    usleep(1000000);
  }

  return 0;
}

int clearGrid()
{
	for(int y = 0; y < 23; y++)
	{
	  for(int x = 0; x < 9; x++)
	  {
		  grid[y][x] = 0;
	  }
	}
}

void printBinary(int num) {
    for (int i = sizeof(num) * 8 - 1; i >= 0; i--) {
        int bit = (num >> i) & 1;
        printf("%d", bit);
    }
}
