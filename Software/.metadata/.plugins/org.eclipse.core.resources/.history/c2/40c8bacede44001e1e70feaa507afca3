#include "sys/alt_stdio.h"
#include "system.h"
#include "io.h"
#include <unistd.h>
#include "altera_avalon_pio_regs.h"
#include <stdlib.h>
#include <stdint.h>
#include "altera_avalon_pio_regs.h"
#include <sys/alt_irq.h>

#define START_X 3
#define START_Y 0

int grid[24][10];
int rowAdresses[24] = {ROW_0_BASE, ROW_1_BASE, ROW_2_BASE, ROW_3_BASE, ROW_4_BASE, ROW_5_BASE, ROW_6_BASE, ROW_7_BASE, ROW_8_BASE, ROW_9_BASE, ROW_10_BASE, ROW_11_BASE, ROW_12_BASE, ROW_13_BASE, ROW_14_BASE, ROW_15_BASE, ROW_16_BASE, ROW_17_BASE, ROW_18_BASE, ROW_19_BASE, ROW_20_BASE, ROW_21_BASE, ROW_22_BASE, ROW_23_BASE};
int currentBlock[4][4][3];
typedef enum {I, J, L, O, S, T, Z} blocks;

void move_left_interrupt(void* context)
{
	printf("move left");

	// Reset interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(MOVE_LEFT_BASE,0);
}

void move_right_interrupt(void* context)
{
	printf("move right");

	// Reset interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(MOVE_RIGHT_BASE,0);
}

void rotate_left_interrupt(void* context)
{
	printf("rotate left");

	// Reset interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ROTATE_LEFT_BASE,0);
}

void rotate_right_interrupt(void* context)
{
	printf("rotate right");

	// Reset interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(ROTATE_RIGHT_BASE,0);
}

int main()
{
  unsigned char rowArray[30];
  char binString = "010000000000000000000000000000";

  clearGrid();
  	int start_x = START_X;
  	int start_y = START_Y;
  	for(int y = 0; y < 4; y++)
  	{
  	  for(int x = 0; x < 4; x++)
  	  {
		currentBlock[y][x][0] = start_y;
		currentBlock[y][x][1] = start_x;
		if(x == 0)
		{
			currentBlock[y][x][2] = 6;
		}
		else
		{
			currentBlock[y][x][2] = 0;
		}

		start_x = start_x + 1;
  	  }
  	  start_y = start_y + 1;
  	  start_x = START_X;
  	}


  /* Event loop never exits. */
  addBlockToGrid(currentBlock);

  initInterupts();
  while (1)
  {
	  gravity();
	  drawGrid();


	  //IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE));
	  //IOWR_ALTERA_AVALON_PIO_DATA(rowAdresses[0], row);
	  //IOWR_ALTERA_AVALON_PIO_DATA(rowAdresses[1], 0b010010000000000000000000000000);
	  //IOWR_ALTERA_AVALON_PIO_DATA(ROW_2_BASE, 0b00010000000000000000000000000000);
	    usleep(1000000);
  }

  return 0;
}

void initInterupts()
{
	// move left interrupt
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(MOVE_LEFT_BASE,0x1);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(MOVE_LEFT_BASE,0);
	alt_ic_isr_register(MOVE_LEFT_IRQ_INTERRUPT_CONTROLLER_ID, MOVE_LEFT_IRQ, move_left_interrupt, NULL, 0x0);
	//
}

void gravity()
{
	removeBlockFromGrid(currentBlock);
	for(int y = 0; y < 4; y++)
	{
		for(int x = 0; x < 4; x++)
		{
			currentBlock[y][x][0] = currentBlock[y][x][0] + 1;
		}
	}
	addBlockToGrid(currentBlock);
}

/*int createBlock(blocks blockType, int out_block[4][4][3])
{
	int block[4][4][3];
	int start_x;
	int start_y;
	for(int y = 0; y < 4; y++)
	{
	  for(int x = 0; x < 4; x++)
	  {
		  block[y][x][0] = start_y;
		  block[y][x][] = start_x;
		  block[y][x][0] = 0;
		  start_x = start_x + 1;
	  }
	  start_y = start_y + 1;
	}

	switch(blockType)
	{
		case I:
			break;
		case J:
			break;
		case L:
			break;
		case O:
			break;
		case S:
			break;
		case T:
			break;
		case Z:
			break;
	}

	return block;
}*/

void addBlockToGrid(int block[4][4][3])
{
	for(int y = 0; y < 4; y++)
	{
	  for(int x = 0; x < 4; x++)
	  {
		  grid[block[y][x][0]][block[y][x][1]] = block[y][x][2];
	  }
	}
}

void removeBlockFromGrid(int block[4][4][3])
{
	for(int y = 0; y < 4; y++)
	{
	  for(int x = 0; x < 4; x++)
	  {
		  if(grid[block[y][x][0]][block[y][x][1]] != 0)
		  {
			  grid[block[y][x][0]][block[y][x][1]] = 0;
		  }
	  }
	}
}

int clearGrid()
{
	for(int y = 0; y < 23; y++)
	{
	  for(int x = 0; x < 9; x++)
	  {
		  grid[y][x] = 0;
	  }
	}
}

int drawGrid()
{
	uint32_t row = 0b00000000000000000000000000000000;
    int cursor = 29;
	 for(int y = 0; y < 23; y++)
		  {
			  cursor = 29;
			  for(int x = 0; x <= 9; x++)
			  {
				  if(grid[y][x] != 0)
				  {
					  switch(grid[y][x])
					  {
					  	  case 1:
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
					  		  break;
					  	  case 2:
					  		  row |= (0 << cursor);
					  		  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  break;
					  	 case 3:
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  break;
					  	 case 4:
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  break;
					  	 case 5:
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  break;
					  	 case 6:
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (0 << cursor);
							  cursor = cursor - 1;
							  break;
					  	 case 7:
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  row |= (1 << cursor);
							  cursor = cursor - 1;
							  break;
					  }
				  }
				  else
				  {
					  cursor = cursor - 3;
				  }
			  }
			  IOWR_ALTERA_AVALON_PIO_DATA(rowAdresses[y], row);
			  row = 0b00000000000000000000000000000000;
		  }
}

void printBinary(int num) {
    for (int i = sizeof(num) * 8 - 1; i >= 0; i--) {
        int bit = (num >> i) & 1;
        printf("%d", bit);
    }
}
