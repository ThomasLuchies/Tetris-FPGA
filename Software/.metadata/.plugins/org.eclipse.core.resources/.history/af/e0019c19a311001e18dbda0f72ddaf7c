#include <stdio.h>
#include <iostream>
#include <opencv2\core\core.hpp>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\core\core.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <opencv2\features2d\features2d.hpp>
#include <opencv2\opencv.hpp>
#include <opencv2/video/background_segm.hpp>
using namespace cv;
using namespace std;
void track(int, void*);
Mat originalImage;
Mat figMaskMOG2;
Mat grayImage, eyelash, or2, edges, mirrored;
int thresh = 140, maxVal = 255;
int type = 1, value = 8;
int main(){
Ptr< BackgroundSubtractor> pMOG2 = new BackgroundSubtractorMOG2();
cv::Rect myRoi(288, 12, 288, 288);
VideoCapture cap;
cap.open(0);
while (1)
{
cap >> originalImage;
cv::flip(originalImage, mirrored, 1);
cv::Point(12, 12), cv::Scalar(0, 0, 255));
cv::rectangle(mirrored, myRoi, cv::Scalar(0, 0, 255));
eyelash = mirrored(myRoi);
cvtColor(eyelash, grayImage, CV_RGB2GRAY);
GaussianBlur(grayImage, grayImage, Size(23, 23), 0);
namedWindow("set", CV_WINDOW_AUTOSIZE);
createTrackbar("Threshold", "set", &thresh, 250, track);
createTrackbar("Maximum", "set", &maxVal, 255, track);
createTrackbar("Threshold Type", "set", &type, 4, track);
createTrackbar("Edges", "set", &value, 100, track);
pMOG2->operator()(eyelash, figMaskMOG2);
cv::rectangle(figMaskMOG2, myRoi, cv::Scalar(0, 0, 255));
track(0, 0);
imshow("Original Image", mirrored);
imshow("Background Removed", figMaskMOG2);
imshow("Grey",grayImage);
char key = waitKey(24);
if (key == 27) break;
}
return 0;
}
void track(int, void*){
int count = 0;
char a[40];
vector<vector<Point> > contours;
vector<Vec4i> hierarchy;
GaussianBlur(figMaskMOG2, figMaskMOG2, Size(27, 27), 3.5, 3.5);
threshold(figMaskMOG2, figMaskMOG2, thresh, maxVal, type);
Canny(figMaskMOG2, edges, value, value * 2, 3);
findContours(figMaskMOG2, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));
Mat drawing = Mat::zeros(edges.size(), CV_8UC3);
if (contours.size() > 0){
size_t indexOfBiggestContour = -1;
size_t sizeOfBiggestContour = 0;
for (size_t i = 0; i < contours.size(); i++){
if (contours[i].size() > sizeOfBiggestContour){
sizeOfBiggestContour = contours[i].size();
indexOfBiggestContour = i;
}
}
vector<vector<int> >hull(contours.size());
vector<vector<Point> >hullPoint(contours.size());
vector<vector<Vec4i> > defects(contours.size());
vector<vector<Point> >defectPoint(contours.size());
vector<vector<Point> >contours_poly(contours.size());
Point2f rect_point[4];
vector<RotatedRect>minRect(contours.size());
vector<Rect> boundRect(contours.size());
for (size_t i = 0; i<contours.size(); i++){
if (contourArea(contours[i])>5000){
convexHull(contours[i], hull[i], true);
convexityDefects(contours[i], hull[i], defects[i]);
if (indexOfBiggestContour == i){
minRect[i] = minAreaRect(contours[i]);
for (size_t k = 0; k<hull[i].size(); k++){
	int ind = hull[i][k];
	hullPoint[i].push_back(contours[i][ind]);
	}
	for (count = 0,size_t k = 0; k<defects[i].size(); k++, count++){
	if (defects[i][k][3]>13 * 256){
	int p_start = defects[i][k][0];
	int p_end = defects[i][k][1];
	int p_far = defects[i][k][2];
	defectPoint[i].push_back(contours[i][p_far]);
	circle(grayImage, contours[i][p_end], 3, Scalar(0, 255, 0), 2);
	}
	}
	if (count == 1) strcpy_s(a, "1");
	else if (count == 2) strcpy_s(a, "2");
	else if (count == 3) strcpy_s(a, "3");
	else if (count == 4) strcpy_s(a, "4");
	else if (count == 5 || count == 6) strcpy_s(a, "5");
	else strcpy_s(a, "SHOW HAND");
	putText(mirrored, a, Point(75, 450), CV_FONT_HERSHEY_SIMPLEX, 3, Scalar(0, 255, 0), 3, 8, false);
	drawContours(drawing, contours, i, Scalar(255, 255, 0), 2, 8, vector<Vec4i>(), 0, Point());
	drawContours(drawing, hullPoint, i, Scalar(255, 255, 0), 1, 8, vector<Vec4i>(), 0, Point());
	drawContours(grayImage, hullPoint, i, Scalar(0, 0, 255), 2, 8, vector<Vec4i>(), 0, Point());
	approxPolyDP(contours[i], contours_poly[i], 3, false);
	boundRect[i] = boundingRect(contours_poly[i]);
	rectangle(grayImage, boundRect[i].tl(), boundRect[i].br(), Scalar(255, 0, 0), 2, 8, 0);
	minRect[i].points(rect_point);
	for (size_t k = 0; k<4; k++){
	line(grayImage, rect_point[k], rect_point[(k + 1) % 4], Scalar(0, 255, 0), 2, 8);
	}
	}
	}
	}
	imshow("Conclusion", drawing);
	}
}
