// sram_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module sram_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset, // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire [25:0] nios2_gen2_0_data_master_address,               //                 nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,           //                                         .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,            //                                         .byteenable
		input  wire        nios2_gen2_0_data_master_read,                  //                                         .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,              //                                         .readdata
		input  wire        nios2_gen2_0_data_master_write,                 //                                         .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,             //                                         .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,           //                                         .debugaccess
		input  wire [21:0] nios2_gen2_0_instruction_master_address,        //          nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,    //                                         .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,           //                                         .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,       //                                         .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,          //            jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,            //                                         .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,             //                                         .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,         //                                         .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,        //                                         .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,      //                                         .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,       //                                         .chipselect
		output wire [1:0]  move_left_s1_address,                           //                             move_left_s1.address
		output wire        move_left_s1_write,                             //                                         .write
		input  wire [31:0] move_left_s1_readdata,                          //                                         .readdata
		output wire [31:0] move_left_s1_writedata,                         //                                         .writedata
		output wire        move_left_s1_chipselect,                        //                                         .chipselect
		output wire [1:0]  move_right_s1_address,                          //                            move_right_s1.address
		output wire        move_right_s1_write,                            //                                         .write
		input  wire [31:0] move_right_s1_readdata,                         //                                         .readdata
		output wire [31:0] move_right_s1_writedata,                        //                                         .writedata
		output wire        move_right_s1_chipselect,                       //                                         .chipselect
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,           //             nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,             //                                         .write
		output wire        nios2_gen2_0_debug_mem_slave_read,              //                                         .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,          //                                         .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,         //                                         .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,        //                                         .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,       //                                         .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,       //                                         .debugaccess
		output wire [16:0] onchip_memory2_0_s1_address,                    //                      onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                      //                                         .write
		input  wire [15:0] onchip_memory2_0_s1_readdata,                   //                                         .readdata
		output wire [15:0] onchip_memory2_0_s1_writedata,                  //                                         .writedata
		output wire [1:0]  onchip_memory2_0_s1_byteenable,                 //                                         .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                 //                                         .chipselect
		output wire        onchip_memory2_0_s1_clken,                      //                                         .clken
		output wire [1:0]  rotate_left_s1_address,                         //                           rotate_left_s1.address
		output wire        rotate_left_s1_write,                           //                                         .write
		input  wire [31:0] rotate_left_s1_readdata,                        //                                         .readdata
		output wire [31:0] rotate_left_s1_writedata,                       //                                         .writedata
		output wire        rotate_left_s1_chipselect,                      //                                         .chipselect
		output wire [1:0]  rotate_right_s1_address,                        //                          rotate_right_s1.address
		output wire        rotate_right_s1_write,                          //                                         .write
		input  wire [31:0] rotate_right_s1_readdata,                       //                                         .readdata
		output wire [31:0] rotate_right_s1_writedata,                      //                                         .writedata
		output wire        rotate_right_s1_chipselect,                     //                                         .chipselect
		output wire [1:0]  row_0_s1_address,                               //                                 row_0_s1.address
		output wire        row_0_s1_write,                                 //                                         .write
		input  wire [31:0] row_0_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_0_s1_writedata,                             //                                         .writedata
		output wire        row_0_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_1_s1_address,                               //                                 row_1_s1.address
		output wire        row_1_s1_write,                                 //                                         .write
		input  wire [31:0] row_1_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_1_s1_writedata,                             //                                         .writedata
		output wire        row_1_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_10_s1_address,                              //                                row_10_s1.address
		output wire        row_10_s1_write,                                //                                         .write
		input  wire [31:0] row_10_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_10_s1_writedata,                            //                                         .writedata
		output wire        row_10_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_11_s1_address,                              //                                row_11_s1.address
		output wire        row_11_s1_write,                                //                                         .write
		input  wire [31:0] row_11_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_11_s1_writedata,                            //                                         .writedata
		output wire        row_11_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_12_s1_address,                              //                                row_12_s1.address
		output wire        row_12_s1_write,                                //                                         .write
		input  wire [31:0] row_12_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_12_s1_writedata,                            //                                         .writedata
		output wire        row_12_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_13_s1_address,                              //                                row_13_s1.address
		output wire        row_13_s1_write,                                //                                         .write
		input  wire [31:0] row_13_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_13_s1_writedata,                            //                                         .writedata
		output wire        row_13_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_14_s1_address,                              //                                row_14_s1.address
		output wire        row_14_s1_write,                                //                                         .write
		input  wire [31:0] row_14_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_14_s1_writedata,                            //                                         .writedata
		output wire        row_14_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_15_s1_address,                              //                                row_15_s1.address
		output wire        row_15_s1_write,                                //                                         .write
		input  wire [31:0] row_15_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_15_s1_writedata,                            //                                         .writedata
		output wire        row_15_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_16_s1_address,                              //                                row_16_s1.address
		output wire        row_16_s1_write,                                //                                         .write
		input  wire [31:0] row_16_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_16_s1_writedata,                            //                                         .writedata
		output wire        row_16_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_17_s1_address,                              //                                row_17_s1.address
		output wire        row_17_s1_write,                                //                                         .write
		input  wire [31:0] row_17_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_17_s1_writedata,                            //                                         .writedata
		output wire        row_17_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_18_s1_address,                              //                                row_18_s1.address
		output wire        row_18_s1_write,                                //                                         .write
		input  wire [31:0] row_18_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_18_s1_writedata,                            //                                         .writedata
		output wire        row_18_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_19_s1_address,                              //                                row_19_s1.address
		output wire        row_19_s1_write,                                //                                         .write
		input  wire [31:0] row_19_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_19_s1_writedata,                            //                                         .writedata
		output wire        row_19_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_2_s1_address,                               //                                 row_2_s1.address
		output wire        row_2_s1_write,                                 //                                         .write
		input  wire [31:0] row_2_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_2_s1_writedata,                             //                                         .writedata
		output wire        row_2_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_20_s1_address,                              //                                row_20_s1.address
		output wire        row_20_s1_write,                                //                                         .write
		input  wire [31:0] row_20_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_20_s1_writedata,                            //                                         .writedata
		output wire        row_20_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_21_s1_address,                              //                                row_21_s1.address
		output wire        row_21_s1_write,                                //                                         .write
		input  wire [31:0] row_21_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_21_s1_writedata,                            //                                         .writedata
		output wire        row_21_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_22_s1_address,                              //                                row_22_s1.address
		output wire        row_22_s1_write,                                //                                         .write
		input  wire [31:0] row_22_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_22_s1_writedata,                            //                                         .writedata
		output wire        row_22_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_23_s1_address,                              //                                row_23_s1.address
		output wire        row_23_s1_write,                                //                                         .write
		input  wire [31:0] row_23_s1_readdata,                             //                                         .readdata
		output wire [31:0] row_23_s1_writedata,                            //                                         .writedata
		output wire        row_23_s1_chipselect,                           //                                         .chipselect
		output wire [1:0]  row_3_s1_address,                               //                                 row_3_s1.address
		output wire        row_3_s1_write,                                 //                                         .write
		input  wire [31:0] row_3_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_3_s1_writedata,                             //                                         .writedata
		output wire        row_3_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_4_s1_address,                               //                                 row_4_s1.address
		output wire        row_4_s1_write,                                 //                                         .write
		input  wire [31:0] row_4_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_4_s1_writedata,                             //                                         .writedata
		output wire        row_4_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_5_s1_address,                               //                                 row_5_s1.address
		output wire        row_5_s1_write,                                 //                                         .write
		input  wire [31:0] row_5_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_5_s1_writedata,                             //                                         .writedata
		output wire        row_5_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_6_s1_address,                               //                                 row_6_s1.address
		output wire        row_6_s1_write,                                 //                                         .write
		input  wire [31:0] row_6_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_6_s1_writedata,                             //                                         .writedata
		output wire        row_6_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_7_s1_address,                               //                                 row_7_s1.address
		output wire        row_7_s1_write,                                 //                                         .write
		input  wire [31:0] row_7_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_7_s1_writedata,                             //                                         .writedata
		output wire        row_7_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_8_s1_address,                               //                                 row_8_s1.address
		output wire        row_8_s1_write,                                 //                                         .write
		input  wire [31:0] row_8_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_8_s1_writedata,                             //                                         .writedata
		output wire        row_8_s1_chipselect,                            //                                         .chipselect
		output wire [1:0]  row_9_s1_address,                               //                                 row_9_s1.address
		output wire        row_9_s1_write,                                 //                                         .write
		input  wire [31:0] row_9_s1_readdata,                              //                                         .readdata
		output wire [31:0] row_9_s1_writedata,                             //                                         .writedata
		output wire        row_9_s1_chipselect,                            //                                         .chipselect
		output wire [19:0] sram_0_avalon_sram_slave_address,               //                 sram_0_avalon_sram_slave.address
		output wire        sram_0_avalon_sram_slave_write,                 //                                         .write
		output wire        sram_0_avalon_sram_slave_read,                  //                                         .read
		input  wire [15:0] sram_0_avalon_sram_slave_readdata,              //                                         .readdata
		output wire [15:0] sram_0_avalon_sram_slave_writedata,             //                                         .writedata
		output wire [1:0]  sram_0_avalon_sram_slave_byteenable,            //                                         .byteenable
		input  wire        sram_0_avalon_sram_slave_readdatavalid          //                                         .readdatavalid
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [25:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [105:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [31:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [25:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [105:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [31:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [25:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [31:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [15:0] sram_0_avalon_sram_slave_agent_m0_readdata;                                         // sram_0_avalon_sram_slave_translator:uav_readdata -> sram_0_avalon_sram_slave_agent:m0_readdata
	wire          sram_0_avalon_sram_slave_agent_m0_waitrequest;                                      // sram_0_avalon_sram_slave_translator:uav_waitrequest -> sram_0_avalon_sram_slave_agent:m0_waitrequest
	wire          sram_0_avalon_sram_slave_agent_m0_debugaccess;                                      // sram_0_avalon_sram_slave_agent:m0_debugaccess -> sram_0_avalon_sram_slave_translator:uav_debugaccess
	wire   [25:0] sram_0_avalon_sram_slave_agent_m0_address;                                          // sram_0_avalon_sram_slave_agent:m0_address -> sram_0_avalon_sram_slave_translator:uav_address
	wire    [1:0] sram_0_avalon_sram_slave_agent_m0_byteenable;                                       // sram_0_avalon_sram_slave_agent:m0_byteenable -> sram_0_avalon_sram_slave_translator:uav_byteenable
	wire          sram_0_avalon_sram_slave_agent_m0_read;                                             // sram_0_avalon_sram_slave_agent:m0_read -> sram_0_avalon_sram_slave_translator:uav_read
	wire          sram_0_avalon_sram_slave_agent_m0_readdatavalid;                                    // sram_0_avalon_sram_slave_translator:uav_readdatavalid -> sram_0_avalon_sram_slave_agent:m0_readdatavalid
	wire          sram_0_avalon_sram_slave_agent_m0_lock;                                             // sram_0_avalon_sram_slave_agent:m0_lock -> sram_0_avalon_sram_slave_translator:uav_lock
	wire   [15:0] sram_0_avalon_sram_slave_agent_m0_writedata;                                        // sram_0_avalon_sram_slave_agent:m0_writedata -> sram_0_avalon_sram_slave_translator:uav_writedata
	wire          sram_0_avalon_sram_slave_agent_m0_write;                                            // sram_0_avalon_sram_slave_agent:m0_write -> sram_0_avalon_sram_slave_translator:uav_write
	wire    [1:0] sram_0_avalon_sram_slave_agent_m0_burstcount;                                       // sram_0_avalon_sram_slave_agent:m0_burstcount -> sram_0_avalon_sram_slave_translator:uav_burstcount
	wire          sram_0_avalon_sram_slave_agent_rf_source_valid;                                     // sram_0_avalon_sram_slave_agent:rf_source_valid -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_valid
	wire   [88:0] sram_0_avalon_sram_slave_agent_rf_source_data;                                      // sram_0_avalon_sram_slave_agent:rf_source_data -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_data
	wire          sram_0_avalon_sram_slave_agent_rf_source_ready;                                     // sram_0_avalon_sram_slave_agent_rsp_fifo:in_ready -> sram_0_avalon_sram_slave_agent:rf_source_ready
	wire          sram_0_avalon_sram_slave_agent_rf_source_startofpacket;                             // sram_0_avalon_sram_slave_agent:rf_source_startofpacket -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rf_source_endofpacket;                               // sram_0_avalon_sram_slave_agent:rf_source_endofpacket -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid;                                  // sram_0_avalon_sram_slave_agent_rsp_fifo:out_valid -> sram_0_avalon_sram_slave_agent:rf_sink_valid
	wire   [88:0] sram_0_avalon_sram_slave_agent_rsp_fifo_out_data;                                   // sram_0_avalon_sram_slave_agent_rsp_fifo:out_data -> sram_0_avalon_sram_slave_agent:rf_sink_data
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready;                                  // sram_0_avalon_sram_slave_agent:rf_sink_ready -> sram_0_avalon_sram_slave_agent_rsp_fifo:out_ready
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket;                          // sram_0_avalon_sram_slave_agent_rsp_fifo:out_startofpacket -> sram_0_avalon_sram_slave_agent:rf_sink_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket;                            // sram_0_avalon_sram_slave_agent_rsp_fifo:out_endofpacket -> sram_0_avalon_sram_slave_agent:rf_sink_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid;                                // sram_0_avalon_sram_slave_agent:rdata_fifo_src_valid -> sram_0_avalon_sram_slave_agent_rdata_fifo:in_valid
	wire   [17:0] sram_0_avalon_sram_slave_agent_rdata_fifo_src_data;                                 // sram_0_avalon_sram_slave_agent:rdata_fifo_src_data -> sram_0_avalon_sram_slave_agent_rdata_fifo:in_data
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready;                                // sram_0_avalon_sram_slave_agent_rdata_fifo:in_ready -> sram_0_avalon_sram_slave_agent:rdata_fifo_src_ready
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [25:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [106:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [106:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [31:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire   [15:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [25:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [1:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [15:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [1:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire   [88:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire   [88:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire   [31:0] row_0_s1_agent_m0_readdata;                                                         // row_0_s1_translator:uav_readdata -> row_0_s1_agent:m0_readdata
	wire          row_0_s1_agent_m0_waitrequest;                                                      // row_0_s1_translator:uav_waitrequest -> row_0_s1_agent:m0_waitrequest
	wire          row_0_s1_agent_m0_debugaccess;                                                      // row_0_s1_agent:m0_debugaccess -> row_0_s1_translator:uav_debugaccess
	wire   [25:0] row_0_s1_agent_m0_address;                                                          // row_0_s1_agent:m0_address -> row_0_s1_translator:uav_address
	wire    [3:0] row_0_s1_agent_m0_byteenable;                                                       // row_0_s1_agent:m0_byteenable -> row_0_s1_translator:uav_byteenable
	wire          row_0_s1_agent_m0_read;                                                             // row_0_s1_agent:m0_read -> row_0_s1_translator:uav_read
	wire          row_0_s1_agent_m0_readdatavalid;                                                    // row_0_s1_translator:uav_readdatavalid -> row_0_s1_agent:m0_readdatavalid
	wire          row_0_s1_agent_m0_lock;                                                             // row_0_s1_agent:m0_lock -> row_0_s1_translator:uav_lock
	wire   [31:0] row_0_s1_agent_m0_writedata;                                                        // row_0_s1_agent:m0_writedata -> row_0_s1_translator:uav_writedata
	wire          row_0_s1_agent_m0_write;                                                            // row_0_s1_agent:m0_write -> row_0_s1_translator:uav_write
	wire    [2:0] row_0_s1_agent_m0_burstcount;                                                       // row_0_s1_agent:m0_burstcount -> row_0_s1_translator:uav_burstcount
	wire          row_0_s1_agent_rf_source_valid;                                                     // row_0_s1_agent:rf_source_valid -> row_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_0_s1_agent_rf_source_data;                                                      // row_0_s1_agent:rf_source_data -> row_0_s1_agent_rsp_fifo:in_data
	wire          row_0_s1_agent_rf_source_ready;                                                     // row_0_s1_agent_rsp_fifo:in_ready -> row_0_s1_agent:rf_source_ready
	wire          row_0_s1_agent_rf_source_startofpacket;                                             // row_0_s1_agent:rf_source_startofpacket -> row_0_s1_agent_rsp_fifo:in_startofpacket
	wire          row_0_s1_agent_rf_source_endofpacket;                                               // row_0_s1_agent:rf_source_endofpacket -> row_0_s1_agent_rsp_fifo:in_endofpacket
	wire          row_0_s1_agent_rsp_fifo_out_valid;                                                  // row_0_s1_agent_rsp_fifo:out_valid -> row_0_s1_agent:rf_sink_valid
	wire  [106:0] row_0_s1_agent_rsp_fifo_out_data;                                                   // row_0_s1_agent_rsp_fifo:out_data -> row_0_s1_agent:rf_sink_data
	wire          row_0_s1_agent_rsp_fifo_out_ready;                                                  // row_0_s1_agent:rf_sink_ready -> row_0_s1_agent_rsp_fifo:out_ready
	wire          row_0_s1_agent_rsp_fifo_out_startofpacket;                                          // row_0_s1_agent_rsp_fifo:out_startofpacket -> row_0_s1_agent:rf_sink_startofpacket
	wire          row_0_s1_agent_rsp_fifo_out_endofpacket;                                            // row_0_s1_agent_rsp_fifo:out_endofpacket -> row_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> row_0_s1_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> row_0_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // row_0_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [31:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> row_0_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> row_0_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> row_0_s1_agent:cp_endofpacket
	wire   [31:0] row_1_s1_agent_m0_readdata;                                                         // row_1_s1_translator:uav_readdata -> row_1_s1_agent:m0_readdata
	wire          row_1_s1_agent_m0_waitrequest;                                                      // row_1_s1_translator:uav_waitrequest -> row_1_s1_agent:m0_waitrequest
	wire          row_1_s1_agent_m0_debugaccess;                                                      // row_1_s1_agent:m0_debugaccess -> row_1_s1_translator:uav_debugaccess
	wire   [25:0] row_1_s1_agent_m0_address;                                                          // row_1_s1_agent:m0_address -> row_1_s1_translator:uav_address
	wire    [3:0] row_1_s1_agent_m0_byteenable;                                                       // row_1_s1_agent:m0_byteenable -> row_1_s1_translator:uav_byteenable
	wire          row_1_s1_agent_m0_read;                                                             // row_1_s1_agent:m0_read -> row_1_s1_translator:uav_read
	wire          row_1_s1_agent_m0_readdatavalid;                                                    // row_1_s1_translator:uav_readdatavalid -> row_1_s1_agent:m0_readdatavalid
	wire          row_1_s1_agent_m0_lock;                                                             // row_1_s1_agent:m0_lock -> row_1_s1_translator:uav_lock
	wire   [31:0] row_1_s1_agent_m0_writedata;                                                        // row_1_s1_agent:m0_writedata -> row_1_s1_translator:uav_writedata
	wire          row_1_s1_agent_m0_write;                                                            // row_1_s1_agent:m0_write -> row_1_s1_translator:uav_write
	wire    [2:0] row_1_s1_agent_m0_burstcount;                                                       // row_1_s1_agent:m0_burstcount -> row_1_s1_translator:uav_burstcount
	wire          row_1_s1_agent_rf_source_valid;                                                     // row_1_s1_agent:rf_source_valid -> row_1_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_1_s1_agent_rf_source_data;                                                      // row_1_s1_agent:rf_source_data -> row_1_s1_agent_rsp_fifo:in_data
	wire          row_1_s1_agent_rf_source_ready;                                                     // row_1_s1_agent_rsp_fifo:in_ready -> row_1_s1_agent:rf_source_ready
	wire          row_1_s1_agent_rf_source_startofpacket;                                             // row_1_s1_agent:rf_source_startofpacket -> row_1_s1_agent_rsp_fifo:in_startofpacket
	wire          row_1_s1_agent_rf_source_endofpacket;                                               // row_1_s1_agent:rf_source_endofpacket -> row_1_s1_agent_rsp_fifo:in_endofpacket
	wire          row_1_s1_agent_rsp_fifo_out_valid;                                                  // row_1_s1_agent_rsp_fifo:out_valid -> row_1_s1_agent:rf_sink_valid
	wire  [106:0] row_1_s1_agent_rsp_fifo_out_data;                                                   // row_1_s1_agent_rsp_fifo:out_data -> row_1_s1_agent:rf_sink_data
	wire          row_1_s1_agent_rsp_fifo_out_ready;                                                  // row_1_s1_agent:rf_sink_ready -> row_1_s1_agent_rsp_fifo:out_ready
	wire          row_1_s1_agent_rsp_fifo_out_startofpacket;                                          // row_1_s1_agent_rsp_fifo:out_startofpacket -> row_1_s1_agent:rf_sink_startofpacket
	wire          row_1_s1_agent_rsp_fifo_out_endofpacket;                                            // row_1_s1_agent_rsp_fifo:out_endofpacket -> row_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> row_1_s1_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> row_1_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // row_1_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [31:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> row_1_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> row_1_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> row_1_s1_agent:cp_endofpacket
	wire   [31:0] row_2_s1_agent_m0_readdata;                                                         // row_2_s1_translator:uav_readdata -> row_2_s1_agent:m0_readdata
	wire          row_2_s1_agent_m0_waitrequest;                                                      // row_2_s1_translator:uav_waitrequest -> row_2_s1_agent:m0_waitrequest
	wire          row_2_s1_agent_m0_debugaccess;                                                      // row_2_s1_agent:m0_debugaccess -> row_2_s1_translator:uav_debugaccess
	wire   [25:0] row_2_s1_agent_m0_address;                                                          // row_2_s1_agent:m0_address -> row_2_s1_translator:uav_address
	wire    [3:0] row_2_s1_agent_m0_byteenable;                                                       // row_2_s1_agent:m0_byteenable -> row_2_s1_translator:uav_byteenable
	wire          row_2_s1_agent_m0_read;                                                             // row_2_s1_agent:m0_read -> row_2_s1_translator:uav_read
	wire          row_2_s1_agent_m0_readdatavalid;                                                    // row_2_s1_translator:uav_readdatavalid -> row_2_s1_agent:m0_readdatavalid
	wire          row_2_s1_agent_m0_lock;                                                             // row_2_s1_agent:m0_lock -> row_2_s1_translator:uav_lock
	wire   [31:0] row_2_s1_agent_m0_writedata;                                                        // row_2_s1_agent:m0_writedata -> row_2_s1_translator:uav_writedata
	wire          row_2_s1_agent_m0_write;                                                            // row_2_s1_agent:m0_write -> row_2_s1_translator:uav_write
	wire    [2:0] row_2_s1_agent_m0_burstcount;                                                       // row_2_s1_agent:m0_burstcount -> row_2_s1_translator:uav_burstcount
	wire          row_2_s1_agent_rf_source_valid;                                                     // row_2_s1_agent:rf_source_valid -> row_2_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_2_s1_agent_rf_source_data;                                                      // row_2_s1_agent:rf_source_data -> row_2_s1_agent_rsp_fifo:in_data
	wire          row_2_s1_agent_rf_source_ready;                                                     // row_2_s1_agent_rsp_fifo:in_ready -> row_2_s1_agent:rf_source_ready
	wire          row_2_s1_agent_rf_source_startofpacket;                                             // row_2_s1_agent:rf_source_startofpacket -> row_2_s1_agent_rsp_fifo:in_startofpacket
	wire          row_2_s1_agent_rf_source_endofpacket;                                               // row_2_s1_agent:rf_source_endofpacket -> row_2_s1_agent_rsp_fifo:in_endofpacket
	wire          row_2_s1_agent_rsp_fifo_out_valid;                                                  // row_2_s1_agent_rsp_fifo:out_valid -> row_2_s1_agent:rf_sink_valid
	wire  [106:0] row_2_s1_agent_rsp_fifo_out_data;                                                   // row_2_s1_agent_rsp_fifo:out_data -> row_2_s1_agent:rf_sink_data
	wire          row_2_s1_agent_rsp_fifo_out_ready;                                                  // row_2_s1_agent:rf_sink_ready -> row_2_s1_agent_rsp_fifo:out_ready
	wire          row_2_s1_agent_rsp_fifo_out_startofpacket;                                          // row_2_s1_agent_rsp_fifo:out_startofpacket -> row_2_s1_agent:rf_sink_startofpacket
	wire          row_2_s1_agent_rsp_fifo_out_endofpacket;                                            // row_2_s1_agent_rsp_fifo:out_endofpacket -> row_2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> row_2_s1_agent:cp_valid
	wire  [105:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> row_2_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // row_2_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [31:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> row_2_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> row_2_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> row_2_s1_agent:cp_endofpacket
	wire   [31:0] row_3_s1_agent_m0_readdata;                                                         // row_3_s1_translator:uav_readdata -> row_3_s1_agent:m0_readdata
	wire          row_3_s1_agent_m0_waitrequest;                                                      // row_3_s1_translator:uav_waitrequest -> row_3_s1_agent:m0_waitrequest
	wire          row_3_s1_agent_m0_debugaccess;                                                      // row_3_s1_agent:m0_debugaccess -> row_3_s1_translator:uav_debugaccess
	wire   [25:0] row_3_s1_agent_m0_address;                                                          // row_3_s1_agent:m0_address -> row_3_s1_translator:uav_address
	wire    [3:0] row_3_s1_agent_m0_byteenable;                                                       // row_3_s1_agent:m0_byteenable -> row_3_s1_translator:uav_byteenable
	wire          row_3_s1_agent_m0_read;                                                             // row_3_s1_agent:m0_read -> row_3_s1_translator:uav_read
	wire          row_3_s1_agent_m0_readdatavalid;                                                    // row_3_s1_translator:uav_readdatavalid -> row_3_s1_agent:m0_readdatavalid
	wire          row_3_s1_agent_m0_lock;                                                             // row_3_s1_agent:m0_lock -> row_3_s1_translator:uav_lock
	wire   [31:0] row_3_s1_agent_m0_writedata;                                                        // row_3_s1_agent:m0_writedata -> row_3_s1_translator:uav_writedata
	wire          row_3_s1_agent_m0_write;                                                            // row_3_s1_agent:m0_write -> row_3_s1_translator:uav_write
	wire    [2:0] row_3_s1_agent_m0_burstcount;                                                       // row_3_s1_agent:m0_burstcount -> row_3_s1_translator:uav_burstcount
	wire          row_3_s1_agent_rf_source_valid;                                                     // row_3_s1_agent:rf_source_valid -> row_3_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_3_s1_agent_rf_source_data;                                                      // row_3_s1_agent:rf_source_data -> row_3_s1_agent_rsp_fifo:in_data
	wire          row_3_s1_agent_rf_source_ready;                                                     // row_3_s1_agent_rsp_fifo:in_ready -> row_3_s1_agent:rf_source_ready
	wire          row_3_s1_agent_rf_source_startofpacket;                                             // row_3_s1_agent:rf_source_startofpacket -> row_3_s1_agent_rsp_fifo:in_startofpacket
	wire          row_3_s1_agent_rf_source_endofpacket;                                               // row_3_s1_agent:rf_source_endofpacket -> row_3_s1_agent_rsp_fifo:in_endofpacket
	wire          row_3_s1_agent_rsp_fifo_out_valid;                                                  // row_3_s1_agent_rsp_fifo:out_valid -> row_3_s1_agent:rf_sink_valid
	wire  [106:0] row_3_s1_agent_rsp_fifo_out_data;                                                   // row_3_s1_agent_rsp_fifo:out_data -> row_3_s1_agent:rf_sink_data
	wire          row_3_s1_agent_rsp_fifo_out_ready;                                                  // row_3_s1_agent:rf_sink_ready -> row_3_s1_agent_rsp_fifo:out_ready
	wire          row_3_s1_agent_rsp_fifo_out_startofpacket;                                          // row_3_s1_agent_rsp_fifo:out_startofpacket -> row_3_s1_agent:rf_sink_startofpacket
	wire          row_3_s1_agent_rsp_fifo_out_endofpacket;                                            // row_3_s1_agent_rsp_fifo:out_endofpacket -> row_3_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> row_3_s1_agent:cp_valid
	wire  [105:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> row_3_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // row_3_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [31:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> row_3_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> row_3_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> row_3_s1_agent:cp_endofpacket
	wire   [31:0] row_4_s1_agent_m0_readdata;                                                         // row_4_s1_translator:uav_readdata -> row_4_s1_agent:m0_readdata
	wire          row_4_s1_agent_m0_waitrequest;                                                      // row_4_s1_translator:uav_waitrequest -> row_4_s1_agent:m0_waitrequest
	wire          row_4_s1_agent_m0_debugaccess;                                                      // row_4_s1_agent:m0_debugaccess -> row_4_s1_translator:uav_debugaccess
	wire   [25:0] row_4_s1_agent_m0_address;                                                          // row_4_s1_agent:m0_address -> row_4_s1_translator:uav_address
	wire    [3:0] row_4_s1_agent_m0_byteenable;                                                       // row_4_s1_agent:m0_byteenable -> row_4_s1_translator:uav_byteenable
	wire          row_4_s1_agent_m0_read;                                                             // row_4_s1_agent:m0_read -> row_4_s1_translator:uav_read
	wire          row_4_s1_agent_m0_readdatavalid;                                                    // row_4_s1_translator:uav_readdatavalid -> row_4_s1_agent:m0_readdatavalid
	wire          row_4_s1_agent_m0_lock;                                                             // row_4_s1_agent:m0_lock -> row_4_s1_translator:uav_lock
	wire   [31:0] row_4_s1_agent_m0_writedata;                                                        // row_4_s1_agent:m0_writedata -> row_4_s1_translator:uav_writedata
	wire          row_4_s1_agent_m0_write;                                                            // row_4_s1_agent:m0_write -> row_4_s1_translator:uav_write
	wire    [2:0] row_4_s1_agent_m0_burstcount;                                                       // row_4_s1_agent:m0_burstcount -> row_4_s1_translator:uav_burstcount
	wire          row_4_s1_agent_rf_source_valid;                                                     // row_4_s1_agent:rf_source_valid -> row_4_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_4_s1_agent_rf_source_data;                                                      // row_4_s1_agent:rf_source_data -> row_4_s1_agent_rsp_fifo:in_data
	wire          row_4_s1_agent_rf_source_ready;                                                     // row_4_s1_agent_rsp_fifo:in_ready -> row_4_s1_agent:rf_source_ready
	wire          row_4_s1_agent_rf_source_startofpacket;                                             // row_4_s1_agent:rf_source_startofpacket -> row_4_s1_agent_rsp_fifo:in_startofpacket
	wire          row_4_s1_agent_rf_source_endofpacket;                                               // row_4_s1_agent:rf_source_endofpacket -> row_4_s1_agent_rsp_fifo:in_endofpacket
	wire          row_4_s1_agent_rsp_fifo_out_valid;                                                  // row_4_s1_agent_rsp_fifo:out_valid -> row_4_s1_agent:rf_sink_valid
	wire  [106:0] row_4_s1_agent_rsp_fifo_out_data;                                                   // row_4_s1_agent_rsp_fifo:out_data -> row_4_s1_agent:rf_sink_data
	wire          row_4_s1_agent_rsp_fifo_out_ready;                                                  // row_4_s1_agent:rf_sink_ready -> row_4_s1_agent_rsp_fifo:out_ready
	wire          row_4_s1_agent_rsp_fifo_out_startofpacket;                                          // row_4_s1_agent_rsp_fifo:out_startofpacket -> row_4_s1_agent:rf_sink_startofpacket
	wire          row_4_s1_agent_rsp_fifo_out_endofpacket;                                            // row_4_s1_agent_rsp_fifo:out_endofpacket -> row_4_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> row_4_s1_agent:cp_valid
	wire  [105:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> row_4_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // row_4_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [31:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> row_4_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> row_4_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> row_4_s1_agent:cp_endofpacket
	wire   [31:0] row_5_s1_agent_m0_readdata;                                                         // row_5_s1_translator:uav_readdata -> row_5_s1_agent:m0_readdata
	wire          row_5_s1_agent_m0_waitrequest;                                                      // row_5_s1_translator:uav_waitrequest -> row_5_s1_agent:m0_waitrequest
	wire          row_5_s1_agent_m0_debugaccess;                                                      // row_5_s1_agent:m0_debugaccess -> row_5_s1_translator:uav_debugaccess
	wire   [25:0] row_5_s1_agent_m0_address;                                                          // row_5_s1_agent:m0_address -> row_5_s1_translator:uav_address
	wire    [3:0] row_5_s1_agent_m0_byteenable;                                                       // row_5_s1_agent:m0_byteenable -> row_5_s1_translator:uav_byteenable
	wire          row_5_s1_agent_m0_read;                                                             // row_5_s1_agent:m0_read -> row_5_s1_translator:uav_read
	wire          row_5_s1_agent_m0_readdatavalid;                                                    // row_5_s1_translator:uav_readdatavalid -> row_5_s1_agent:m0_readdatavalid
	wire          row_5_s1_agent_m0_lock;                                                             // row_5_s1_agent:m0_lock -> row_5_s1_translator:uav_lock
	wire   [31:0] row_5_s1_agent_m0_writedata;                                                        // row_5_s1_agent:m0_writedata -> row_5_s1_translator:uav_writedata
	wire          row_5_s1_agent_m0_write;                                                            // row_5_s1_agent:m0_write -> row_5_s1_translator:uav_write
	wire    [2:0] row_5_s1_agent_m0_burstcount;                                                       // row_5_s1_agent:m0_burstcount -> row_5_s1_translator:uav_burstcount
	wire          row_5_s1_agent_rf_source_valid;                                                     // row_5_s1_agent:rf_source_valid -> row_5_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_5_s1_agent_rf_source_data;                                                      // row_5_s1_agent:rf_source_data -> row_5_s1_agent_rsp_fifo:in_data
	wire          row_5_s1_agent_rf_source_ready;                                                     // row_5_s1_agent_rsp_fifo:in_ready -> row_5_s1_agent:rf_source_ready
	wire          row_5_s1_agent_rf_source_startofpacket;                                             // row_5_s1_agent:rf_source_startofpacket -> row_5_s1_agent_rsp_fifo:in_startofpacket
	wire          row_5_s1_agent_rf_source_endofpacket;                                               // row_5_s1_agent:rf_source_endofpacket -> row_5_s1_agent_rsp_fifo:in_endofpacket
	wire          row_5_s1_agent_rsp_fifo_out_valid;                                                  // row_5_s1_agent_rsp_fifo:out_valid -> row_5_s1_agent:rf_sink_valid
	wire  [106:0] row_5_s1_agent_rsp_fifo_out_data;                                                   // row_5_s1_agent_rsp_fifo:out_data -> row_5_s1_agent:rf_sink_data
	wire          row_5_s1_agent_rsp_fifo_out_ready;                                                  // row_5_s1_agent:rf_sink_ready -> row_5_s1_agent_rsp_fifo:out_ready
	wire          row_5_s1_agent_rsp_fifo_out_startofpacket;                                          // row_5_s1_agent_rsp_fifo:out_startofpacket -> row_5_s1_agent:rf_sink_startofpacket
	wire          row_5_s1_agent_rsp_fifo_out_endofpacket;                                            // row_5_s1_agent_rsp_fifo:out_endofpacket -> row_5_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> row_5_s1_agent:cp_valid
	wire  [105:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> row_5_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // row_5_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [31:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> row_5_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> row_5_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> row_5_s1_agent:cp_endofpacket
	wire   [31:0] row_6_s1_agent_m0_readdata;                                                         // row_6_s1_translator:uav_readdata -> row_6_s1_agent:m0_readdata
	wire          row_6_s1_agent_m0_waitrequest;                                                      // row_6_s1_translator:uav_waitrequest -> row_6_s1_agent:m0_waitrequest
	wire          row_6_s1_agent_m0_debugaccess;                                                      // row_6_s1_agent:m0_debugaccess -> row_6_s1_translator:uav_debugaccess
	wire   [25:0] row_6_s1_agent_m0_address;                                                          // row_6_s1_agent:m0_address -> row_6_s1_translator:uav_address
	wire    [3:0] row_6_s1_agent_m0_byteenable;                                                       // row_6_s1_agent:m0_byteenable -> row_6_s1_translator:uav_byteenable
	wire          row_6_s1_agent_m0_read;                                                             // row_6_s1_agent:m0_read -> row_6_s1_translator:uav_read
	wire          row_6_s1_agent_m0_readdatavalid;                                                    // row_6_s1_translator:uav_readdatavalid -> row_6_s1_agent:m0_readdatavalid
	wire          row_6_s1_agent_m0_lock;                                                             // row_6_s1_agent:m0_lock -> row_6_s1_translator:uav_lock
	wire   [31:0] row_6_s1_agent_m0_writedata;                                                        // row_6_s1_agent:m0_writedata -> row_6_s1_translator:uav_writedata
	wire          row_6_s1_agent_m0_write;                                                            // row_6_s1_agent:m0_write -> row_6_s1_translator:uav_write
	wire    [2:0] row_6_s1_agent_m0_burstcount;                                                       // row_6_s1_agent:m0_burstcount -> row_6_s1_translator:uav_burstcount
	wire          row_6_s1_agent_rf_source_valid;                                                     // row_6_s1_agent:rf_source_valid -> row_6_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_6_s1_agent_rf_source_data;                                                      // row_6_s1_agent:rf_source_data -> row_6_s1_agent_rsp_fifo:in_data
	wire          row_6_s1_agent_rf_source_ready;                                                     // row_6_s1_agent_rsp_fifo:in_ready -> row_6_s1_agent:rf_source_ready
	wire          row_6_s1_agent_rf_source_startofpacket;                                             // row_6_s1_agent:rf_source_startofpacket -> row_6_s1_agent_rsp_fifo:in_startofpacket
	wire          row_6_s1_agent_rf_source_endofpacket;                                               // row_6_s1_agent:rf_source_endofpacket -> row_6_s1_agent_rsp_fifo:in_endofpacket
	wire          row_6_s1_agent_rsp_fifo_out_valid;                                                  // row_6_s1_agent_rsp_fifo:out_valid -> row_6_s1_agent:rf_sink_valid
	wire  [106:0] row_6_s1_agent_rsp_fifo_out_data;                                                   // row_6_s1_agent_rsp_fifo:out_data -> row_6_s1_agent:rf_sink_data
	wire          row_6_s1_agent_rsp_fifo_out_ready;                                                  // row_6_s1_agent:rf_sink_ready -> row_6_s1_agent_rsp_fifo:out_ready
	wire          row_6_s1_agent_rsp_fifo_out_startofpacket;                                          // row_6_s1_agent_rsp_fifo:out_startofpacket -> row_6_s1_agent:rf_sink_startofpacket
	wire          row_6_s1_agent_rsp_fifo_out_endofpacket;                                            // row_6_s1_agent_rsp_fifo:out_endofpacket -> row_6_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> row_6_s1_agent:cp_valid
	wire  [105:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> row_6_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // row_6_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [31:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> row_6_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> row_6_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> row_6_s1_agent:cp_endofpacket
	wire   [31:0] row_7_s1_agent_m0_readdata;                                                         // row_7_s1_translator:uav_readdata -> row_7_s1_agent:m0_readdata
	wire          row_7_s1_agent_m0_waitrequest;                                                      // row_7_s1_translator:uav_waitrequest -> row_7_s1_agent:m0_waitrequest
	wire          row_7_s1_agent_m0_debugaccess;                                                      // row_7_s1_agent:m0_debugaccess -> row_7_s1_translator:uav_debugaccess
	wire   [25:0] row_7_s1_agent_m0_address;                                                          // row_7_s1_agent:m0_address -> row_7_s1_translator:uav_address
	wire    [3:0] row_7_s1_agent_m0_byteenable;                                                       // row_7_s1_agent:m0_byteenable -> row_7_s1_translator:uav_byteenable
	wire          row_7_s1_agent_m0_read;                                                             // row_7_s1_agent:m0_read -> row_7_s1_translator:uav_read
	wire          row_7_s1_agent_m0_readdatavalid;                                                    // row_7_s1_translator:uav_readdatavalid -> row_7_s1_agent:m0_readdatavalid
	wire          row_7_s1_agent_m0_lock;                                                             // row_7_s1_agent:m0_lock -> row_7_s1_translator:uav_lock
	wire   [31:0] row_7_s1_agent_m0_writedata;                                                        // row_7_s1_agent:m0_writedata -> row_7_s1_translator:uav_writedata
	wire          row_7_s1_agent_m0_write;                                                            // row_7_s1_agent:m0_write -> row_7_s1_translator:uav_write
	wire    [2:0] row_7_s1_agent_m0_burstcount;                                                       // row_7_s1_agent:m0_burstcount -> row_7_s1_translator:uav_burstcount
	wire          row_7_s1_agent_rf_source_valid;                                                     // row_7_s1_agent:rf_source_valid -> row_7_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_7_s1_agent_rf_source_data;                                                      // row_7_s1_agent:rf_source_data -> row_7_s1_agent_rsp_fifo:in_data
	wire          row_7_s1_agent_rf_source_ready;                                                     // row_7_s1_agent_rsp_fifo:in_ready -> row_7_s1_agent:rf_source_ready
	wire          row_7_s1_agent_rf_source_startofpacket;                                             // row_7_s1_agent:rf_source_startofpacket -> row_7_s1_agent_rsp_fifo:in_startofpacket
	wire          row_7_s1_agent_rf_source_endofpacket;                                               // row_7_s1_agent:rf_source_endofpacket -> row_7_s1_agent_rsp_fifo:in_endofpacket
	wire          row_7_s1_agent_rsp_fifo_out_valid;                                                  // row_7_s1_agent_rsp_fifo:out_valid -> row_7_s1_agent:rf_sink_valid
	wire  [106:0] row_7_s1_agent_rsp_fifo_out_data;                                                   // row_7_s1_agent_rsp_fifo:out_data -> row_7_s1_agent:rf_sink_data
	wire          row_7_s1_agent_rsp_fifo_out_ready;                                                  // row_7_s1_agent:rf_sink_ready -> row_7_s1_agent_rsp_fifo:out_ready
	wire          row_7_s1_agent_rsp_fifo_out_startofpacket;                                          // row_7_s1_agent_rsp_fifo:out_startofpacket -> row_7_s1_agent:rf_sink_startofpacket
	wire          row_7_s1_agent_rsp_fifo_out_endofpacket;                                            // row_7_s1_agent_rsp_fifo:out_endofpacket -> row_7_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> row_7_s1_agent:cp_valid
	wire  [105:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> row_7_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // row_7_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [31:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> row_7_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> row_7_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> row_7_s1_agent:cp_endofpacket
	wire   [31:0] row_8_s1_agent_m0_readdata;                                                         // row_8_s1_translator:uav_readdata -> row_8_s1_agent:m0_readdata
	wire          row_8_s1_agent_m0_waitrequest;                                                      // row_8_s1_translator:uav_waitrequest -> row_8_s1_agent:m0_waitrequest
	wire          row_8_s1_agent_m0_debugaccess;                                                      // row_8_s1_agent:m0_debugaccess -> row_8_s1_translator:uav_debugaccess
	wire   [25:0] row_8_s1_agent_m0_address;                                                          // row_8_s1_agent:m0_address -> row_8_s1_translator:uav_address
	wire    [3:0] row_8_s1_agent_m0_byteenable;                                                       // row_8_s1_agent:m0_byteenable -> row_8_s1_translator:uav_byteenable
	wire          row_8_s1_agent_m0_read;                                                             // row_8_s1_agent:m0_read -> row_8_s1_translator:uav_read
	wire          row_8_s1_agent_m0_readdatavalid;                                                    // row_8_s1_translator:uav_readdatavalid -> row_8_s1_agent:m0_readdatavalid
	wire          row_8_s1_agent_m0_lock;                                                             // row_8_s1_agent:m0_lock -> row_8_s1_translator:uav_lock
	wire   [31:0] row_8_s1_agent_m0_writedata;                                                        // row_8_s1_agent:m0_writedata -> row_8_s1_translator:uav_writedata
	wire          row_8_s1_agent_m0_write;                                                            // row_8_s1_agent:m0_write -> row_8_s1_translator:uav_write
	wire    [2:0] row_8_s1_agent_m0_burstcount;                                                       // row_8_s1_agent:m0_burstcount -> row_8_s1_translator:uav_burstcount
	wire          row_8_s1_agent_rf_source_valid;                                                     // row_8_s1_agent:rf_source_valid -> row_8_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_8_s1_agent_rf_source_data;                                                      // row_8_s1_agent:rf_source_data -> row_8_s1_agent_rsp_fifo:in_data
	wire          row_8_s1_agent_rf_source_ready;                                                     // row_8_s1_agent_rsp_fifo:in_ready -> row_8_s1_agent:rf_source_ready
	wire          row_8_s1_agent_rf_source_startofpacket;                                             // row_8_s1_agent:rf_source_startofpacket -> row_8_s1_agent_rsp_fifo:in_startofpacket
	wire          row_8_s1_agent_rf_source_endofpacket;                                               // row_8_s1_agent:rf_source_endofpacket -> row_8_s1_agent_rsp_fifo:in_endofpacket
	wire          row_8_s1_agent_rsp_fifo_out_valid;                                                  // row_8_s1_agent_rsp_fifo:out_valid -> row_8_s1_agent:rf_sink_valid
	wire  [106:0] row_8_s1_agent_rsp_fifo_out_data;                                                   // row_8_s1_agent_rsp_fifo:out_data -> row_8_s1_agent:rf_sink_data
	wire          row_8_s1_agent_rsp_fifo_out_ready;                                                  // row_8_s1_agent:rf_sink_ready -> row_8_s1_agent_rsp_fifo:out_ready
	wire          row_8_s1_agent_rsp_fifo_out_startofpacket;                                          // row_8_s1_agent_rsp_fifo:out_startofpacket -> row_8_s1_agent:rf_sink_startofpacket
	wire          row_8_s1_agent_rsp_fifo_out_endofpacket;                                            // row_8_s1_agent_rsp_fifo:out_endofpacket -> row_8_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> row_8_s1_agent:cp_valid
	wire  [105:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> row_8_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // row_8_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [31:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> row_8_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> row_8_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> row_8_s1_agent:cp_endofpacket
	wire   [31:0] row_9_s1_agent_m0_readdata;                                                         // row_9_s1_translator:uav_readdata -> row_9_s1_agent:m0_readdata
	wire          row_9_s1_agent_m0_waitrequest;                                                      // row_9_s1_translator:uav_waitrequest -> row_9_s1_agent:m0_waitrequest
	wire          row_9_s1_agent_m0_debugaccess;                                                      // row_9_s1_agent:m0_debugaccess -> row_9_s1_translator:uav_debugaccess
	wire   [25:0] row_9_s1_agent_m0_address;                                                          // row_9_s1_agent:m0_address -> row_9_s1_translator:uav_address
	wire    [3:0] row_9_s1_agent_m0_byteenable;                                                       // row_9_s1_agent:m0_byteenable -> row_9_s1_translator:uav_byteenable
	wire          row_9_s1_agent_m0_read;                                                             // row_9_s1_agent:m0_read -> row_9_s1_translator:uav_read
	wire          row_9_s1_agent_m0_readdatavalid;                                                    // row_9_s1_translator:uav_readdatavalid -> row_9_s1_agent:m0_readdatavalid
	wire          row_9_s1_agent_m0_lock;                                                             // row_9_s1_agent:m0_lock -> row_9_s1_translator:uav_lock
	wire   [31:0] row_9_s1_agent_m0_writedata;                                                        // row_9_s1_agent:m0_writedata -> row_9_s1_translator:uav_writedata
	wire          row_9_s1_agent_m0_write;                                                            // row_9_s1_agent:m0_write -> row_9_s1_translator:uav_write
	wire    [2:0] row_9_s1_agent_m0_burstcount;                                                       // row_9_s1_agent:m0_burstcount -> row_9_s1_translator:uav_burstcount
	wire          row_9_s1_agent_rf_source_valid;                                                     // row_9_s1_agent:rf_source_valid -> row_9_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_9_s1_agent_rf_source_data;                                                      // row_9_s1_agent:rf_source_data -> row_9_s1_agent_rsp_fifo:in_data
	wire          row_9_s1_agent_rf_source_ready;                                                     // row_9_s1_agent_rsp_fifo:in_ready -> row_9_s1_agent:rf_source_ready
	wire          row_9_s1_agent_rf_source_startofpacket;                                             // row_9_s1_agent:rf_source_startofpacket -> row_9_s1_agent_rsp_fifo:in_startofpacket
	wire          row_9_s1_agent_rf_source_endofpacket;                                               // row_9_s1_agent:rf_source_endofpacket -> row_9_s1_agent_rsp_fifo:in_endofpacket
	wire          row_9_s1_agent_rsp_fifo_out_valid;                                                  // row_9_s1_agent_rsp_fifo:out_valid -> row_9_s1_agent:rf_sink_valid
	wire  [106:0] row_9_s1_agent_rsp_fifo_out_data;                                                   // row_9_s1_agent_rsp_fifo:out_data -> row_9_s1_agent:rf_sink_data
	wire          row_9_s1_agent_rsp_fifo_out_ready;                                                  // row_9_s1_agent:rf_sink_ready -> row_9_s1_agent_rsp_fifo:out_ready
	wire          row_9_s1_agent_rsp_fifo_out_startofpacket;                                          // row_9_s1_agent_rsp_fifo:out_startofpacket -> row_9_s1_agent:rf_sink_startofpacket
	wire          row_9_s1_agent_rsp_fifo_out_endofpacket;                                            // row_9_s1_agent_rsp_fifo:out_endofpacket -> row_9_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> row_9_s1_agent:cp_valid
	wire  [105:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> row_9_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                              // row_9_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [31:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> row_9_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> row_9_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> row_9_s1_agent:cp_endofpacket
	wire   [31:0] row_11_s1_agent_m0_readdata;                                                        // row_11_s1_translator:uav_readdata -> row_11_s1_agent:m0_readdata
	wire          row_11_s1_agent_m0_waitrequest;                                                     // row_11_s1_translator:uav_waitrequest -> row_11_s1_agent:m0_waitrequest
	wire          row_11_s1_agent_m0_debugaccess;                                                     // row_11_s1_agent:m0_debugaccess -> row_11_s1_translator:uav_debugaccess
	wire   [25:0] row_11_s1_agent_m0_address;                                                         // row_11_s1_agent:m0_address -> row_11_s1_translator:uav_address
	wire    [3:0] row_11_s1_agent_m0_byteenable;                                                      // row_11_s1_agent:m0_byteenable -> row_11_s1_translator:uav_byteenable
	wire          row_11_s1_agent_m0_read;                                                            // row_11_s1_agent:m0_read -> row_11_s1_translator:uav_read
	wire          row_11_s1_agent_m0_readdatavalid;                                                   // row_11_s1_translator:uav_readdatavalid -> row_11_s1_agent:m0_readdatavalid
	wire          row_11_s1_agent_m0_lock;                                                            // row_11_s1_agent:m0_lock -> row_11_s1_translator:uav_lock
	wire   [31:0] row_11_s1_agent_m0_writedata;                                                       // row_11_s1_agent:m0_writedata -> row_11_s1_translator:uav_writedata
	wire          row_11_s1_agent_m0_write;                                                           // row_11_s1_agent:m0_write -> row_11_s1_translator:uav_write
	wire    [2:0] row_11_s1_agent_m0_burstcount;                                                      // row_11_s1_agent:m0_burstcount -> row_11_s1_translator:uav_burstcount
	wire          row_11_s1_agent_rf_source_valid;                                                    // row_11_s1_agent:rf_source_valid -> row_11_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_11_s1_agent_rf_source_data;                                                     // row_11_s1_agent:rf_source_data -> row_11_s1_agent_rsp_fifo:in_data
	wire          row_11_s1_agent_rf_source_ready;                                                    // row_11_s1_agent_rsp_fifo:in_ready -> row_11_s1_agent:rf_source_ready
	wire          row_11_s1_agent_rf_source_startofpacket;                                            // row_11_s1_agent:rf_source_startofpacket -> row_11_s1_agent_rsp_fifo:in_startofpacket
	wire          row_11_s1_agent_rf_source_endofpacket;                                              // row_11_s1_agent:rf_source_endofpacket -> row_11_s1_agent_rsp_fifo:in_endofpacket
	wire          row_11_s1_agent_rsp_fifo_out_valid;                                                 // row_11_s1_agent_rsp_fifo:out_valid -> row_11_s1_agent:rf_sink_valid
	wire  [106:0] row_11_s1_agent_rsp_fifo_out_data;                                                  // row_11_s1_agent_rsp_fifo:out_data -> row_11_s1_agent:rf_sink_data
	wire          row_11_s1_agent_rsp_fifo_out_ready;                                                 // row_11_s1_agent:rf_sink_ready -> row_11_s1_agent_rsp_fifo:out_ready
	wire          row_11_s1_agent_rsp_fifo_out_startofpacket;                                         // row_11_s1_agent_rsp_fifo:out_startofpacket -> row_11_s1_agent:rf_sink_startofpacket
	wire          row_11_s1_agent_rsp_fifo_out_endofpacket;                                           // row_11_s1_agent_rsp_fifo:out_endofpacket -> row_11_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> row_11_s1_agent:cp_valid
	wire  [105:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> row_11_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                              // row_11_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [31:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> row_11_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> row_11_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> row_11_s1_agent:cp_endofpacket
	wire   [31:0] row_12_s1_agent_m0_readdata;                                                        // row_12_s1_translator:uav_readdata -> row_12_s1_agent:m0_readdata
	wire          row_12_s1_agent_m0_waitrequest;                                                     // row_12_s1_translator:uav_waitrequest -> row_12_s1_agent:m0_waitrequest
	wire          row_12_s1_agent_m0_debugaccess;                                                     // row_12_s1_agent:m0_debugaccess -> row_12_s1_translator:uav_debugaccess
	wire   [25:0] row_12_s1_agent_m0_address;                                                         // row_12_s1_agent:m0_address -> row_12_s1_translator:uav_address
	wire    [3:0] row_12_s1_agent_m0_byteenable;                                                      // row_12_s1_agent:m0_byteenable -> row_12_s1_translator:uav_byteenable
	wire          row_12_s1_agent_m0_read;                                                            // row_12_s1_agent:m0_read -> row_12_s1_translator:uav_read
	wire          row_12_s1_agent_m0_readdatavalid;                                                   // row_12_s1_translator:uav_readdatavalid -> row_12_s1_agent:m0_readdatavalid
	wire          row_12_s1_agent_m0_lock;                                                            // row_12_s1_agent:m0_lock -> row_12_s1_translator:uav_lock
	wire   [31:0] row_12_s1_agent_m0_writedata;                                                       // row_12_s1_agent:m0_writedata -> row_12_s1_translator:uav_writedata
	wire          row_12_s1_agent_m0_write;                                                           // row_12_s1_agent:m0_write -> row_12_s1_translator:uav_write
	wire    [2:0] row_12_s1_agent_m0_burstcount;                                                      // row_12_s1_agent:m0_burstcount -> row_12_s1_translator:uav_burstcount
	wire          row_12_s1_agent_rf_source_valid;                                                    // row_12_s1_agent:rf_source_valid -> row_12_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_12_s1_agent_rf_source_data;                                                     // row_12_s1_agent:rf_source_data -> row_12_s1_agent_rsp_fifo:in_data
	wire          row_12_s1_agent_rf_source_ready;                                                    // row_12_s1_agent_rsp_fifo:in_ready -> row_12_s1_agent:rf_source_ready
	wire          row_12_s1_agent_rf_source_startofpacket;                                            // row_12_s1_agent:rf_source_startofpacket -> row_12_s1_agent_rsp_fifo:in_startofpacket
	wire          row_12_s1_agent_rf_source_endofpacket;                                              // row_12_s1_agent:rf_source_endofpacket -> row_12_s1_agent_rsp_fifo:in_endofpacket
	wire          row_12_s1_agent_rsp_fifo_out_valid;                                                 // row_12_s1_agent_rsp_fifo:out_valid -> row_12_s1_agent:rf_sink_valid
	wire  [106:0] row_12_s1_agent_rsp_fifo_out_data;                                                  // row_12_s1_agent_rsp_fifo:out_data -> row_12_s1_agent:rf_sink_data
	wire          row_12_s1_agent_rsp_fifo_out_ready;                                                 // row_12_s1_agent:rf_sink_ready -> row_12_s1_agent_rsp_fifo:out_ready
	wire          row_12_s1_agent_rsp_fifo_out_startofpacket;                                         // row_12_s1_agent_rsp_fifo:out_startofpacket -> row_12_s1_agent:rf_sink_startofpacket
	wire          row_12_s1_agent_rsp_fifo_out_endofpacket;                                           // row_12_s1_agent_rsp_fifo:out_endofpacket -> row_12_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> row_12_s1_agent:cp_valid
	wire  [105:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> row_12_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                              // row_12_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [31:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> row_12_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> row_12_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> row_12_s1_agent:cp_endofpacket
	wire   [31:0] row_13_s1_agent_m0_readdata;                                                        // row_13_s1_translator:uav_readdata -> row_13_s1_agent:m0_readdata
	wire          row_13_s1_agent_m0_waitrequest;                                                     // row_13_s1_translator:uav_waitrequest -> row_13_s1_agent:m0_waitrequest
	wire          row_13_s1_agent_m0_debugaccess;                                                     // row_13_s1_agent:m0_debugaccess -> row_13_s1_translator:uav_debugaccess
	wire   [25:0] row_13_s1_agent_m0_address;                                                         // row_13_s1_agent:m0_address -> row_13_s1_translator:uav_address
	wire    [3:0] row_13_s1_agent_m0_byteenable;                                                      // row_13_s1_agent:m0_byteenable -> row_13_s1_translator:uav_byteenable
	wire          row_13_s1_agent_m0_read;                                                            // row_13_s1_agent:m0_read -> row_13_s1_translator:uav_read
	wire          row_13_s1_agent_m0_readdatavalid;                                                   // row_13_s1_translator:uav_readdatavalid -> row_13_s1_agent:m0_readdatavalid
	wire          row_13_s1_agent_m0_lock;                                                            // row_13_s1_agent:m0_lock -> row_13_s1_translator:uav_lock
	wire   [31:0] row_13_s1_agent_m0_writedata;                                                       // row_13_s1_agent:m0_writedata -> row_13_s1_translator:uav_writedata
	wire          row_13_s1_agent_m0_write;                                                           // row_13_s1_agent:m0_write -> row_13_s1_translator:uav_write
	wire    [2:0] row_13_s1_agent_m0_burstcount;                                                      // row_13_s1_agent:m0_burstcount -> row_13_s1_translator:uav_burstcount
	wire          row_13_s1_agent_rf_source_valid;                                                    // row_13_s1_agent:rf_source_valid -> row_13_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_13_s1_agent_rf_source_data;                                                     // row_13_s1_agent:rf_source_data -> row_13_s1_agent_rsp_fifo:in_data
	wire          row_13_s1_agent_rf_source_ready;                                                    // row_13_s1_agent_rsp_fifo:in_ready -> row_13_s1_agent:rf_source_ready
	wire          row_13_s1_agent_rf_source_startofpacket;                                            // row_13_s1_agent:rf_source_startofpacket -> row_13_s1_agent_rsp_fifo:in_startofpacket
	wire          row_13_s1_agent_rf_source_endofpacket;                                              // row_13_s1_agent:rf_source_endofpacket -> row_13_s1_agent_rsp_fifo:in_endofpacket
	wire          row_13_s1_agent_rsp_fifo_out_valid;                                                 // row_13_s1_agent_rsp_fifo:out_valid -> row_13_s1_agent:rf_sink_valid
	wire  [106:0] row_13_s1_agent_rsp_fifo_out_data;                                                  // row_13_s1_agent_rsp_fifo:out_data -> row_13_s1_agent:rf_sink_data
	wire          row_13_s1_agent_rsp_fifo_out_ready;                                                 // row_13_s1_agent:rf_sink_ready -> row_13_s1_agent_rsp_fifo:out_ready
	wire          row_13_s1_agent_rsp_fifo_out_startofpacket;                                         // row_13_s1_agent_rsp_fifo:out_startofpacket -> row_13_s1_agent:rf_sink_startofpacket
	wire          row_13_s1_agent_rsp_fifo_out_endofpacket;                                           // row_13_s1_agent_rsp_fifo:out_endofpacket -> row_13_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> row_13_s1_agent:cp_valid
	wire  [105:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> row_13_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                              // row_13_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [31:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> row_13_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> row_13_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> row_13_s1_agent:cp_endofpacket
	wire   [31:0] row_14_s1_agent_m0_readdata;                                                        // row_14_s1_translator:uav_readdata -> row_14_s1_agent:m0_readdata
	wire          row_14_s1_agent_m0_waitrequest;                                                     // row_14_s1_translator:uav_waitrequest -> row_14_s1_agent:m0_waitrequest
	wire          row_14_s1_agent_m0_debugaccess;                                                     // row_14_s1_agent:m0_debugaccess -> row_14_s1_translator:uav_debugaccess
	wire   [25:0] row_14_s1_agent_m0_address;                                                         // row_14_s1_agent:m0_address -> row_14_s1_translator:uav_address
	wire    [3:0] row_14_s1_agent_m0_byteenable;                                                      // row_14_s1_agent:m0_byteenable -> row_14_s1_translator:uav_byteenable
	wire          row_14_s1_agent_m0_read;                                                            // row_14_s1_agent:m0_read -> row_14_s1_translator:uav_read
	wire          row_14_s1_agent_m0_readdatavalid;                                                   // row_14_s1_translator:uav_readdatavalid -> row_14_s1_agent:m0_readdatavalid
	wire          row_14_s1_agent_m0_lock;                                                            // row_14_s1_agent:m0_lock -> row_14_s1_translator:uav_lock
	wire   [31:0] row_14_s1_agent_m0_writedata;                                                       // row_14_s1_agent:m0_writedata -> row_14_s1_translator:uav_writedata
	wire          row_14_s1_agent_m0_write;                                                           // row_14_s1_agent:m0_write -> row_14_s1_translator:uav_write
	wire    [2:0] row_14_s1_agent_m0_burstcount;                                                      // row_14_s1_agent:m0_burstcount -> row_14_s1_translator:uav_burstcount
	wire          row_14_s1_agent_rf_source_valid;                                                    // row_14_s1_agent:rf_source_valid -> row_14_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_14_s1_agent_rf_source_data;                                                     // row_14_s1_agent:rf_source_data -> row_14_s1_agent_rsp_fifo:in_data
	wire          row_14_s1_agent_rf_source_ready;                                                    // row_14_s1_agent_rsp_fifo:in_ready -> row_14_s1_agent:rf_source_ready
	wire          row_14_s1_agent_rf_source_startofpacket;                                            // row_14_s1_agent:rf_source_startofpacket -> row_14_s1_agent_rsp_fifo:in_startofpacket
	wire          row_14_s1_agent_rf_source_endofpacket;                                              // row_14_s1_agent:rf_source_endofpacket -> row_14_s1_agent_rsp_fifo:in_endofpacket
	wire          row_14_s1_agent_rsp_fifo_out_valid;                                                 // row_14_s1_agent_rsp_fifo:out_valid -> row_14_s1_agent:rf_sink_valid
	wire  [106:0] row_14_s1_agent_rsp_fifo_out_data;                                                  // row_14_s1_agent_rsp_fifo:out_data -> row_14_s1_agent:rf_sink_data
	wire          row_14_s1_agent_rsp_fifo_out_ready;                                                 // row_14_s1_agent:rf_sink_ready -> row_14_s1_agent_rsp_fifo:out_ready
	wire          row_14_s1_agent_rsp_fifo_out_startofpacket;                                         // row_14_s1_agent_rsp_fifo:out_startofpacket -> row_14_s1_agent:rf_sink_startofpacket
	wire          row_14_s1_agent_rsp_fifo_out_endofpacket;                                           // row_14_s1_agent_rsp_fifo:out_endofpacket -> row_14_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> row_14_s1_agent:cp_valid
	wire  [105:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> row_14_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                              // row_14_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [31:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> row_14_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> row_14_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> row_14_s1_agent:cp_endofpacket
	wire   [31:0] row_15_s1_agent_m0_readdata;                                                        // row_15_s1_translator:uav_readdata -> row_15_s1_agent:m0_readdata
	wire          row_15_s1_agent_m0_waitrequest;                                                     // row_15_s1_translator:uav_waitrequest -> row_15_s1_agent:m0_waitrequest
	wire          row_15_s1_agent_m0_debugaccess;                                                     // row_15_s1_agent:m0_debugaccess -> row_15_s1_translator:uav_debugaccess
	wire   [25:0] row_15_s1_agent_m0_address;                                                         // row_15_s1_agent:m0_address -> row_15_s1_translator:uav_address
	wire    [3:0] row_15_s1_agent_m0_byteenable;                                                      // row_15_s1_agent:m0_byteenable -> row_15_s1_translator:uav_byteenable
	wire          row_15_s1_agent_m0_read;                                                            // row_15_s1_agent:m0_read -> row_15_s1_translator:uav_read
	wire          row_15_s1_agent_m0_readdatavalid;                                                   // row_15_s1_translator:uav_readdatavalid -> row_15_s1_agent:m0_readdatavalid
	wire          row_15_s1_agent_m0_lock;                                                            // row_15_s1_agent:m0_lock -> row_15_s1_translator:uav_lock
	wire   [31:0] row_15_s1_agent_m0_writedata;                                                       // row_15_s1_agent:m0_writedata -> row_15_s1_translator:uav_writedata
	wire          row_15_s1_agent_m0_write;                                                           // row_15_s1_agent:m0_write -> row_15_s1_translator:uav_write
	wire    [2:0] row_15_s1_agent_m0_burstcount;                                                      // row_15_s1_agent:m0_burstcount -> row_15_s1_translator:uav_burstcount
	wire          row_15_s1_agent_rf_source_valid;                                                    // row_15_s1_agent:rf_source_valid -> row_15_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_15_s1_agent_rf_source_data;                                                     // row_15_s1_agent:rf_source_data -> row_15_s1_agent_rsp_fifo:in_data
	wire          row_15_s1_agent_rf_source_ready;                                                    // row_15_s1_agent_rsp_fifo:in_ready -> row_15_s1_agent:rf_source_ready
	wire          row_15_s1_agent_rf_source_startofpacket;                                            // row_15_s1_agent:rf_source_startofpacket -> row_15_s1_agent_rsp_fifo:in_startofpacket
	wire          row_15_s1_agent_rf_source_endofpacket;                                              // row_15_s1_agent:rf_source_endofpacket -> row_15_s1_agent_rsp_fifo:in_endofpacket
	wire          row_15_s1_agent_rsp_fifo_out_valid;                                                 // row_15_s1_agent_rsp_fifo:out_valid -> row_15_s1_agent:rf_sink_valid
	wire  [106:0] row_15_s1_agent_rsp_fifo_out_data;                                                  // row_15_s1_agent_rsp_fifo:out_data -> row_15_s1_agent:rf_sink_data
	wire          row_15_s1_agent_rsp_fifo_out_ready;                                                 // row_15_s1_agent:rf_sink_ready -> row_15_s1_agent_rsp_fifo:out_ready
	wire          row_15_s1_agent_rsp_fifo_out_startofpacket;                                         // row_15_s1_agent_rsp_fifo:out_startofpacket -> row_15_s1_agent:rf_sink_startofpacket
	wire          row_15_s1_agent_rsp_fifo_out_endofpacket;                                           // row_15_s1_agent_rsp_fifo:out_endofpacket -> row_15_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> row_15_s1_agent:cp_valid
	wire  [105:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> row_15_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                              // row_15_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [31:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> row_15_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> row_15_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> row_15_s1_agent:cp_endofpacket
	wire   [31:0] row_16_s1_agent_m0_readdata;                                                        // row_16_s1_translator:uav_readdata -> row_16_s1_agent:m0_readdata
	wire          row_16_s1_agent_m0_waitrequest;                                                     // row_16_s1_translator:uav_waitrequest -> row_16_s1_agent:m0_waitrequest
	wire          row_16_s1_agent_m0_debugaccess;                                                     // row_16_s1_agent:m0_debugaccess -> row_16_s1_translator:uav_debugaccess
	wire   [25:0] row_16_s1_agent_m0_address;                                                         // row_16_s1_agent:m0_address -> row_16_s1_translator:uav_address
	wire    [3:0] row_16_s1_agent_m0_byteenable;                                                      // row_16_s1_agent:m0_byteenable -> row_16_s1_translator:uav_byteenable
	wire          row_16_s1_agent_m0_read;                                                            // row_16_s1_agent:m0_read -> row_16_s1_translator:uav_read
	wire          row_16_s1_agent_m0_readdatavalid;                                                   // row_16_s1_translator:uav_readdatavalid -> row_16_s1_agent:m0_readdatavalid
	wire          row_16_s1_agent_m0_lock;                                                            // row_16_s1_agent:m0_lock -> row_16_s1_translator:uav_lock
	wire   [31:0] row_16_s1_agent_m0_writedata;                                                       // row_16_s1_agent:m0_writedata -> row_16_s1_translator:uav_writedata
	wire          row_16_s1_agent_m0_write;                                                           // row_16_s1_agent:m0_write -> row_16_s1_translator:uav_write
	wire    [2:0] row_16_s1_agent_m0_burstcount;                                                      // row_16_s1_agent:m0_burstcount -> row_16_s1_translator:uav_burstcount
	wire          row_16_s1_agent_rf_source_valid;                                                    // row_16_s1_agent:rf_source_valid -> row_16_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_16_s1_agent_rf_source_data;                                                     // row_16_s1_agent:rf_source_data -> row_16_s1_agent_rsp_fifo:in_data
	wire          row_16_s1_agent_rf_source_ready;                                                    // row_16_s1_agent_rsp_fifo:in_ready -> row_16_s1_agent:rf_source_ready
	wire          row_16_s1_agent_rf_source_startofpacket;                                            // row_16_s1_agent:rf_source_startofpacket -> row_16_s1_agent_rsp_fifo:in_startofpacket
	wire          row_16_s1_agent_rf_source_endofpacket;                                              // row_16_s1_agent:rf_source_endofpacket -> row_16_s1_agent_rsp_fifo:in_endofpacket
	wire          row_16_s1_agent_rsp_fifo_out_valid;                                                 // row_16_s1_agent_rsp_fifo:out_valid -> row_16_s1_agent:rf_sink_valid
	wire  [106:0] row_16_s1_agent_rsp_fifo_out_data;                                                  // row_16_s1_agent_rsp_fifo:out_data -> row_16_s1_agent:rf_sink_data
	wire          row_16_s1_agent_rsp_fifo_out_ready;                                                 // row_16_s1_agent:rf_sink_ready -> row_16_s1_agent_rsp_fifo:out_ready
	wire          row_16_s1_agent_rsp_fifo_out_startofpacket;                                         // row_16_s1_agent_rsp_fifo:out_startofpacket -> row_16_s1_agent:rf_sink_startofpacket
	wire          row_16_s1_agent_rsp_fifo_out_endofpacket;                                           // row_16_s1_agent_rsp_fifo:out_endofpacket -> row_16_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> row_16_s1_agent:cp_valid
	wire  [105:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> row_16_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                              // row_16_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [31:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> row_16_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> row_16_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> row_16_s1_agent:cp_endofpacket
	wire   [31:0] row_17_s1_agent_m0_readdata;                                                        // row_17_s1_translator:uav_readdata -> row_17_s1_agent:m0_readdata
	wire          row_17_s1_agent_m0_waitrequest;                                                     // row_17_s1_translator:uav_waitrequest -> row_17_s1_agent:m0_waitrequest
	wire          row_17_s1_agent_m0_debugaccess;                                                     // row_17_s1_agent:m0_debugaccess -> row_17_s1_translator:uav_debugaccess
	wire   [25:0] row_17_s1_agent_m0_address;                                                         // row_17_s1_agent:m0_address -> row_17_s1_translator:uav_address
	wire    [3:0] row_17_s1_agent_m0_byteenable;                                                      // row_17_s1_agent:m0_byteenable -> row_17_s1_translator:uav_byteenable
	wire          row_17_s1_agent_m0_read;                                                            // row_17_s1_agent:m0_read -> row_17_s1_translator:uav_read
	wire          row_17_s1_agent_m0_readdatavalid;                                                   // row_17_s1_translator:uav_readdatavalid -> row_17_s1_agent:m0_readdatavalid
	wire          row_17_s1_agent_m0_lock;                                                            // row_17_s1_agent:m0_lock -> row_17_s1_translator:uav_lock
	wire   [31:0] row_17_s1_agent_m0_writedata;                                                       // row_17_s1_agent:m0_writedata -> row_17_s1_translator:uav_writedata
	wire          row_17_s1_agent_m0_write;                                                           // row_17_s1_agent:m0_write -> row_17_s1_translator:uav_write
	wire    [2:0] row_17_s1_agent_m0_burstcount;                                                      // row_17_s1_agent:m0_burstcount -> row_17_s1_translator:uav_burstcount
	wire          row_17_s1_agent_rf_source_valid;                                                    // row_17_s1_agent:rf_source_valid -> row_17_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_17_s1_agent_rf_source_data;                                                     // row_17_s1_agent:rf_source_data -> row_17_s1_agent_rsp_fifo:in_data
	wire          row_17_s1_agent_rf_source_ready;                                                    // row_17_s1_agent_rsp_fifo:in_ready -> row_17_s1_agent:rf_source_ready
	wire          row_17_s1_agent_rf_source_startofpacket;                                            // row_17_s1_agent:rf_source_startofpacket -> row_17_s1_agent_rsp_fifo:in_startofpacket
	wire          row_17_s1_agent_rf_source_endofpacket;                                              // row_17_s1_agent:rf_source_endofpacket -> row_17_s1_agent_rsp_fifo:in_endofpacket
	wire          row_17_s1_agent_rsp_fifo_out_valid;                                                 // row_17_s1_agent_rsp_fifo:out_valid -> row_17_s1_agent:rf_sink_valid
	wire  [106:0] row_17_s1_agent_rsp_fifo_out_data;                                                  // row_17_s1_agent_rsp_fifo:out_data -> row_17_s1_agent:rf_sink_data
	wire          row_17_s1_agent_rsp_fifo_out_ready;                                                 // row_17_s1_agent:rf_sink_ready -> row_17_s1_agent_rsp_fifo:out_ready
	wire          row_17_s1_agent_rsp_fifo_out_startofpacket;                                         // row_17_s1_agent_rsp_fifo:out_startofpacket -> row_17_s1_agent:rf_sink_startofpacket
	wire          row_17_s1_agent_rsp_fifo_out_endofpacket;                                           // row_17_s1_agent_rsp_fifo:out_endofpacket -> row_17_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> row_17_s1_agent:cp_valid
	wire  [105:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> row_17_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                              // row_17_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [31:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> row_17_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> row_17_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> row_17_s1_agent:cp_endofpacket
	wire   [31:0] row_18_s1_agent_m0_readdata;                                                        // row_18_s1_translator:uav_readdata -> row_18_s1_agent:m0_readdata
	wire          row_18_s1_agent_m0_waitrequest;                                                     // row_18_s1_translator:uav_waitrequest -> row_18_s1_agent:m0_waitrequest
	wire          row_18_s1_agent_m0_debugaccess;                                                     // row_18_s1_agent:m0_debugaccess -> row_18_s1_translator:uav_debugaccess
	wire   [25:0] row_18_s1_agent_m0_address;                                                         // row_18_s1_agent:m0_address -> row_18_s1_translator:uav_address
	wire    [3:0] row_18_s1_agent_m0_byteenable;                                                      // row_18_s1_agent:m0_byteenable -> row_18_s1_translator:uav_byteenable
	wire          row_18_s1_agent_m0_read;                                                            // row_18_s1_agent:m0_read -> row_18_s1_translator:uav_read
	wire          row_18_s1_agent_m0_readdatavalid;                                                   // row_18_s1_translator:uav_readdatavalid -> row_18_s1_agent:m0_readdatavalid
	wire          row_18_s1_agent_m0_lock;                                                            // row_18_s1_agent:m0_lock -> row_18_s1_translator:uav_lock
	wire   [31:0] row_18_s1_agent_m0_writedata;                                                       // row_18_s1_agent:m0_writedata -> row_18_s1_translator:uav_writedata
	wire          row_18_s1_agent_m0_write;                                                           // row_18_s1_agent:m0_write -> row_18_s1_translator:uav_write
	wire    [2:0] row_18_s1_agent_m0_burstcount;                                                      // row_18_s1_agent:m0_burstcount -> row_18_s1_translator:uav_burstcount
	wire          row_18_s1_agent_rf_source_valid;                                                    // row_18_s1_agent:rf_source_valid -> row_18_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_18_s1_agent_rf_source_data;                                                     // row_18_s1_agent:rf_source_data -> row_18_s1_agent_rsp_fifo:in_data
	wire          row_18_s1_agent_rf_source_ready;                                                    // row_18_s1_agent_rsp_fifo:in_ready -> row_18_s1_agent:rf_source_ready
	wire          row_18_s1_agent_rf_source_startofpacket;                                            // row_18_s1_agent:rf_source_startofpacket -> row_18_s1_agent_rsp_fifo:in_startofpacket
	wire          row_18_s1_agent_rf_source_endofpacket;                                              // row_18_s1_agent:rf_source_endofpacket -> row_18_s1_agent_rsp_fifo:in_endofpacket
	wire          row_18_s1_agent_rsp_fifo_out_valid;                                                 // row_18_s1_agent_rsp_fifo:out_valid -> row_18_s1_agent:rf_sink_valid
	wire  [106:0] row_18_s1_agent_rsp_fifo_out_data;                                                  // row_18_s1_agent_rsp_fifo:out_data -> row_18_s1_agent:rf_sink_data
	wire          row_18_s1_agent_rsp_fifo_out_ready;                                                 // row_18_s1_agent:rf_sink_ready -> row_18_s1_agent_rsp_fifo:out_ready
	wire          row_18_s1_agent_rsp_fifo_out_startofpacket;                                         // row_18_s1_agent_rsp_fifo:out_startofpacket -> row_18_s1_agent:rf_sink_startofpacket
	wire          row_18_s1_agent_rsp_fifo_out_endofpacket;                                           // row_18_s1_agent_rsp_fifo:out_endofpacket -> row_18_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> row_18_s1_agent:cp_valid
	wire  [105:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> row_18_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                              // row_18_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [31:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> row_18_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> row_18_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> row_18_s1_agent:cp_endofpacket
	wire   [31:0] row_19_s1_agent_m0_readdata;                                                        // row_19_s1_translator:uav_readdata -> row_19_s1_agent:m0_readdata
	wire          row_19_s1_agent_m0_waitrequest;                                                     // row_19_s1_translator:uav_waitrequest -> row_19_s1_agent:m0_waitrequest
	wire          row_19_s1_agent_m0_debugaccess;                                                     // row_19_s1_agent:m0_debugaccess -> row_19_s1_translator:uav_debugaccess
	wire   [25:0] row_19_s1_agent_m0_address;                                                         // row_19_s1_agent:m0_address -> row_19_s1_translator:uav_address
	wire    [3:0] row_19_s1_agent_m0_byteenable;                                                      // row_19_s1_agent:m0_byteenable -> row_19_s1_translator:uav_byteenable
	wire          row_19_s1_agent_m0_read;                                                            // row_19_s1_agent:m0_read -> row_19_s1_translator:uav_read
	wire          row_19_s1_agent_m0_readdatavalid;                                                   // row_19_s1_translator:uav_readdatavalid -> row_19_s1_agent:m0_readdatavalid
	wire          row_19_s1_agent_m0_lock;                                                            // row_19_s1_agent:m0_lock -> row_19_s1_translator:uav_lock
	wire   [31:0] row_19_s1_agent_m0_writedata;                                                       // row_19_s1_agent:m0_writedata -> row_19_s1_translator:uav_writedata
	wire          row_19_s1_agent_m0_write;                                                           // row_19_s1_agent:m0_write -> row_19_s1_translator:uav_write
	wire    [2:0] row_19_s1_agent_m0_burstcount;                                                      // row_19_s1_agent:m0_burstcount -> row_19_s1_translator:uav_burstcount
	wire          row_19_s1_agent_rf_source_valid;                                                    // row_19_s1_agent:rf_source_valid -> row_19_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_19_s1_agent_rf_source_data;                                                     // row_19_s1_agent:rf_source_data -> row_19_s1_agent_rsp_fifo:in_data
	wire          row_19_s1_agent_rf_source_ready;                                                    // row_19_s1_agent_rsp_fifo:in_ready -> row_19_s1_agent:rf_source_ready
	wire          row_19_s1_agent_rf_source_startofpacket;                                            // row_19_s1_agent:rf_source_startofpacket -> row_19_s1_agent_rsp_fifo:in_startofpacket
	wire          row_19_s1_agent_rf_source_endofpacket;                                              // row_19_s1_agent:rf_source_endofpacket -> row_19_s1_agent_rsp_fifo:in_endofpacket
	wire          row_19_s1_agent_rsp_fifo_out_valid;                                                 // row_19_s1_agent_rsp_fifo:out_valid -> row_19_s1_agent:rf_sink_valid
	wire  [106:0] row_19_s1_agent_rsp_fifo_out_data;                                                  // row_19_s1_agent_rsp_fifo:out_data -> row_19_s1_agent:rf_sink_data
	wire          row_19_s1_agent_rsp_fifo_out_ready;                                                 // row_19_s1_agent:rf_sink_ready -> row_19_s1_agent_rsp_fifo:out_ready
	wire          row_19_s1_agent_rsp_fifo_out_startofpacket;                                         // row_19_s1_agent_rsp_fifo:out_startofpacket -> row_19_s1_agent:rf_sink_startofpacket
	wire          row_19_s1_agent_rsp_fifo_out_endofpacket;                                           // row_19_s1_agent_rsp_fifo:out_endofpacket -> row_19_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> row_19_s1_agent:cp_valid
	wire  [105:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> row_19_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                              // row_19_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [31:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> row_19_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> row_19_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> row_19_s1_agent:cp_endofpacket
	wire   [31:0] row_20_s1_agent_m0_readdata;                                                        // row_20_s1_translator:uav_readdata -> row_20_s1_agent:m0_readdata
	wire          row_20_s1_agent_m0_waitrequest;                                                     // row_20_s1_translator:uav_waitrequest -> row_20_s1_agent:m0_waitrequest
	wire          row_20_s1_agent_m0_debugaccess;                                                     // row_20_s1_agent:m0_debugaccess -> row_20_s1_translator:uav_debugaccess
	wire   [25:0] row_20_s1_agent_m0_address;                                                         // row_20_s1_agent:m0_address -> row_20_s1_translator:uav_address
	wire    [3:0] row_20_s1_agent_m0_byteenable;                                                      // row_20_s1_agent:m0_byteenable -> row_20_s1_translator:uav_byteenable
	wire          row_20_s1_agent_m0_read;                                                            // row_20_s1_agent:m0_read -> row_20_s1_translator:uav_read
	wire          row_20_s1_agent_m0_readdatavalid;                                                   // row_20_s1_translator:uav_readdatavalid -> row_20_s1_agent:m0_readdatavalid
	wire          row_20_s1_agent_m0_lock;                                                            // row_20_s1_agent:m0_lock -> row_20_s1_translator:uav_lock
	wire   [31:0] row_20_s1_agent_m0_writedata;                                                       // row_20_s1_agent:m0_writedata -> row_20_s1_translator:uav_writedata
	wire          row_20_s1_agent_m0_write;                                                           // row_20_s1_agent:m0_write -> row_20_s1_translator:uav_write
	wire    [2:0] row_20_s1_agent_m0_burstcount;                                                      // row_20_s1_agent:m0_burstcount -> row_20_s1_translator:uav_burstcount
	wire          row_20_s1_agent_rf_source_valid;                                                    // row_20_s1_agent:rf_source_valid -> row_20_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_20_s1_agent_rf_source_data;                                                     // row_20_s1_agent:rf_source_data -> row_20_s1_agent_rsp_fifo:in_data
	wire          row_20_s1_agent_rf_source_ready;                                                    // row_20_s1_agent_rsp_fifo:in_ready -> row_20_s1_agent:rf_source_ready
	wire          row_20_s1_agent_rf_source_startofpacket;                                            // row_20_s1_agent:rf_source_startofpacket -> row_20_s1_agent_rsp_fifo:in_startofpacket
	wire          row_20_s1_agent_rf_source_endofpacket;                                              // row_20_s1_agent:rf_source_endofpacket -> row_20_s1_agent_rsp_fifo:in_endofpacket
	wire          row_20_s1_agent_rsp_fifo_out_valid;                                                 // row_20_s1_agent_rsp_fifo:out_valid -> row_20_s1_agent:rf_sink_valid
	wire  [106:0] row_20_s1_agent_rsp_fifo_out_data;                                                  // row_20_s1_agent_rsp_fifo:out_data -> row_20_s1_agent:rf_sink_data
	wire          row_20_s1_agent_rsp_fifo_out_ready;                                                 // row_20_s1_agent:rf_sink_ready -> row_20_s1_agent_rsp_fifo:out_ready
	wire          row_20_s1_agent_rsp_fifo_out_startofpacket;                                         // row_20_s1_agent_rsp_fifo:out_startofpacket -> row_20_s1_agent:rf_sink_startofpacket
	wire          row_20_s1_agent_rsp_fifo_out_endofpacket;                                           // row_20_s1_agent_rsp_fifo:out_endofpacket -> row_20_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> row_20_s1_agent:cp_valid
	wire  [105:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> row_20_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                              // row_20_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [31:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> row_20_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> row_20_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> row_20_s1_agent:cp_endofpacket
	wire   [31:0] row_21_s1_agent_m0_readdata;                                                        // row_21_s1_translator:uav_readdata -> row_21_s1_agent:m0_readdata
	wire          row_21_s1_agent_m0_waitrequest;                                                     // row_21_s1_translator:uav_waitrequest -> row_21_s1_agent:m0_waitrequest
	wire          row_21_s1_agent_m0_debugaccess;                                                     // row_21_s1_agent:m0_debugaccess -> row_21_s1_translator:uav_debugaccess
	wire   [25:0] row_21_s1_agent_m0_address;                                                         // row_21_s1_agent:m0_address -> row_21_s1_translator:uav_address
	wire    [3:0] row_21_s1_agent_m0_byteenable;                                                      // row_21_s1_agent:m0_byteenable -> row_21_s1_translator:uav_byteenable
	wire          row_21_s1_agent_m0_read;                                                            // row_21_s1_agent:m0_read -> row_21_s1_translator:uav_read
	wire          row_21_s1_agent_m0_readdatavalid;                                                   // row_21_s1_translator:uav_readdatavalid -> row_21_s1_agent:m0_readdatavalid
	wire          row_21_s1_agent_m0_lock;                                                            // row_21_s1_agent:m0_lock -> row_21_s1_translator:uav_lock
	wire   [31:0] row_21_s1_agent_m0_writedata;                                                       // row_21_s1_agent:m0_writedata -> row_21_s1_translator:uav_writedata
	wire          row_21_s1_agent_m0_write;                                                           // row_21_s1_agent:m0_write -> row_21_s1_translator:uav_write
	wire    [2:0] row_21_s1_agent_m0_burstcount;                                                      // row_21_s1_agent:m0_burstcount -> row_21_s1_translator:uav_burstcount
	wire          row_21_s1_agent_rf_source_valid;                                                    // row_21_s1_agent:rf_source_valid -> row_21_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_21_s1_agent_rf_source_data;                                                     // row_21_s1_agent:rf_source_data -> row_21_s1_agent_rsp_fifo:in_data
	wire          row_21_s1_agent_rf_source_ready;                                                    // row_21_s1_agent_rsp_fifo:in_ready -> row_21_s1_agent:rf_source_ready
	wire          row_21_s1_agent_rf_source_startofpacket;                                            // row_21_s1_agent:rf_source_startofpacket -> row_21_s1_agent_rsp_fifo:in_startofpacket
	wire          row_21_s1_agent_rf_source_endofpacket;                                              // row_21_s1_agent:rf_source_endofpacket -> row_21_s1_agent_rsp_fifo:in_endofpacket
	wire          row_21_s1_agent_rsp_fifo_out_valid;                                                 // row_21_s1_agent_rsp_fifo:out_valid -> row_21_s1_agent:rf_sink_valid
	wire  [106:0] row_21_s1_agent_rsp_fifo_out_data;                                                  // row_21_s1_agent_rsp_fifo:out_data -> row_21_s1_agent:rf_sink_data
	wire          row_21_s1_agent_rsp_fifo_out_ready;                                                 // row_21_s1_agent:rf_sink_ready -> row_21_s1_agent_rsp_fifo:out_ready
	wire          row_21_s1_agent_rsp_fifo_out_startofpacket;                                         // row_21_s1_agent_rsp_fifo:out_startofpacket -> row_21_s1_agent:rf_sink_startofpacket
	wire          row_21_s1_agent_rsp_fifo_out_endofpacket;                                           // row_21_s1_agent_rsp_fifo:out_endofpacket -> row_21_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                              // cmd_mux_024:src_valid -> row_21_s1_agent:cp_valid
	wire  [105:0] cmd_mux_024_src_data;                                                               // cmd_mux_024:src_data -> row_21_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                              // row_21_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [31:0] cmd_mux_024_src_channel;                                                            // cmd_mux_024:src_channel -> row_21_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                      // cmd_mux_024:src_startofpacket -> row_21_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                        // cmd_mux_024:src_endofpacket -> row_21_s1_agent:cp_endofpacket
	wire   [31:0] row_22_s1_agent_m0_readdata;                                                        // row_22_s1_translator:uav_readdata -> row_22_s1_agent:m0_readdata
	wire          row_22_s1_agent_m0_waitrequest;                                                     // row_22_s1_translator:uav_waitrequest -> row_22_s1_agent:m0_waitrequest
	wire          row_22_s1_agent_m0_debugaccess;                                                     // row_22_s1_agent:m0_debugaccess -> row_22_s1_translator:uav_debugaccess
	wire   [25:0] row_22_s1_agent_m0_address;                                                         // row_22_s1_agent:m0_address -> row_22_s1_translator:uav_address
	wire    [3:0] row_22_s1_agent_m0_byteenable;                                                      // row_22_s1_agent:m0_byteenable -> row_22_s1_translator:uav_byteenable
	wire          row_22_s1_agent_m0_read;                                                            // row_22_s1_agent:m0_read -> row_22_s1_translator:uav_read
	wire          row_22_s1_agent_m0_readdatavalid;                                                   // row_22_s1_translator:uav_readdatavalid -> row_22_s1_agent:m0_readdatavalid
	wire          row_22_s1_agent_m0_lock;                                                            // row_22_s1_agent:m0_lock -> row_22_s1_translator:uav_lock
	wire   [31:0] row_22_s1_agent_m0_writedata;                                                       // row_22_s1_agent:m0_writedata -> row_22_s1_translator:uav_writedata
	wire          row_22_s1_agent_m0_write;                                                           // row_22_s1_agent:m0_write -> row_22_s1_translator:uav_write
	wire    [2:0] row_22_s1_agent_m0_burstcount;                                                      // row_22_s1_agent:m0_burstcount -> row_22_s1_translator:uav_burstcount
	wire          row_22_s1_agent_rf_source_valid;                                                    // row_22_s1_agent:rf_source_valid -> row_22_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_22_s1_agent_rf_source_data;                                                     // row_22_s1_agent:rf_source_data -> row_22_s1_agent_rsp_fifo:in_data
	wire          row_22_s1_agent_rf_source_ready;                                                    // row_22_s1_agent_rsp_fifo:in_ready -> row_22_s1_agent:rf_source_ready
	wire          row_22_s1_agent_rf_source_startofpacket;                                            // row_22_s1_agent:rf_source_startofpacket -> row_22_s1_agent_rsp_fifo:in_startofpacket
	wire          row_22_s1_agent_rf_source_endofpacket;                                              // row_22_s1_agent:rf_source_endofpacket -> row_22_s1_agent_rsp_fifo:in_endofpacket
	wire          row_22_s1_agent_rsp_fifo_out_valid;                                                 // row_22_s1_agent_rsp_fifo:out_valid -> row_22_s1_agent:rf_sink_valid
	wire  [106:0] row_22_s1_agent_rsp_fifo_out_data;                                                  // row_22_s1_agent_rsp_fifo:out_data -> row_22_s1_agent:rf_sink_data
	wire          row_22_s1_agent_rsp_fifo_out_ready;                                                 // row_22_s1_agent:rf_sink_ready -> row_22_s1_agent_rsp_fifo:out_ready
	wire          row_22_s1_agent_rsp_fifo_out_startofpacket;                                         // row_22_s1_agent_rsp_fifo:out_startofpacket -> row_22_s1_agent:rf_sink_startofpacket
	wire          row_22_s1_agent_rsp_fifo_out_endofpacket;                                           // row_22_s1_agent_rsp_fifo:out_endofpacket -> row_22_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                              // cmd_mux_025:src_valid -> row_22_s1_agent:cp_valid
	wire  [105:0] cmd_mux_025_src_data;                                                               // cmd_mux_025:src_data -> row_22_s1_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                              // row_22_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [31:0] cmd_mux_025_src_channel;                                                            // cmd_mux_025:src_channel -> row_22_s1_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                      // cmd_mux_025:src_startofpacket -> row_22_s1_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                        // cmd_mux_025:src_endofpacket -> row_22_s1_agent:cp_endofpacket
	wire   [31:0] row_23_s1_agent_m0_readdata;                                                        // row_23_s1_translator:uav_readdata -> row_23_s1_agent:m0_readdata
	wire          row_23_s1_agent_m0_waitrequest;                                                     // row_23_s1_translator:uav_waitrequest -> row_23_s1_agent:m0_waitrequest
	wire          row_23_s1_agent_m0_debugaccess;                                                     // row_23_s1_agent:m0_debugaccess -> row_23_s1_translator:uav_debugaccess
	wire   [25:0] row_23_s1_agent_m0_address;                                                         // row_23_s1_agent:m0_address -> row_23_s1_translator:uav_address
	wire    [3:0] row_23_s1_agent_m0_byteenable;                                                      // row_23_s1_agent:m0_byteenable -> row_23_s1_translator:uav_byteenable
	wire          row_23_s1_agent_m0_read;                                                            // row_23_s1_agent:m0_read -> row_23_s1_translator:uav_read
	wire          row_23_s1_agent_m0_readdatavalid;                                                   // row_23_s1_translator:uav_readdatavalid -> row_23_s1_agent:m0_readdatavalid
	wire          row_23_s1_agent_m0_lock;                                                            // row_23_s1_agent:m0_lock -> row_23_s1_translator:uav_lock
	wire   [31:0] row_23_s1_agent_m0_writedata;                                                       // row_23_s1_agent:m0_writedata -> row_23_s1_translator:uav_writedata
	wire          row_23_s1_agent_m0_write;                                                           // row_23_s1_agent:m0_write -> row_23_s1_translator:uav_write
	wire    [2:0] row_23_s1_agent_m0_burstcount;                                                      // row_23_s1_agent:m0_burstcount -> row_23_s1_translator:uav_burstcount
	wire          row_23_s1_agent_rf_source_valid;                                                    // row_23_s1_agent:rf_source_valid -> row_23_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_23_s1_agent_rf_source_data;                                                     // row_23_s1_agent:rf_source_data -> row_23_s1_agent_rsp_fifo:in_data
	wire          row_23_s1_agent_rf_source_ready;                                                    // row_23_s1_agent_rsp_fifo:in_ready -> row_23_s1_agent:rf_source_ready
	wire          row_23_s1_agent_rf_source_startofpacket;                                            // row_23_s1_agent:rf_source_startofpacket -> row_23_s1_agent_rsp_fifo:in_startofpacket
	wire          row_23_s1_agent_rf_source_endofpacket;                                              // row_23_s1_agent:rf_source_endofpacket -> row_23_s1_agent_rsp_fifo:in_endofpacket
	wire          row_23_s1_agent_rsp_fifo_out_valid;                                                 // row_23_s1_agent_rsp_fifo:out_valid -> row_23_s1_agent:rf_sink_valid
	wire  [106:0] row_23_s1_agent_rsp_fifo_out_data;                                                  // row_23_s1_agent_rsp_fifo:out_data -> row_23_s1_agent:rf_sink_data
	wire          row_23_s1_agent_rsp_fifo_out_ready;                                                 // row_23_s1_agent:rf_sink_ready -> row_23_s1_agent_rsp_fifo:out_ready
	wire          row_23_s1_agent_rsp_fifo_out_startofpacket;                                         // row_23_s1_agent_rsp_fifo:out_startofpacket -> row_23_s1_agent:rf_sink_startofpacket
	wire          row_23_s1_agent_rsp_fifo_out_endofpacket;                                           // row_23_s1_agent_rsp_fifo:out_endofpacket -> row_23_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                              // cmd_mux_026:src_valid -> row_23_s1_agent:cp_valid
	wire  [105:0] cmd_mux_026_src_data;                                                               // cmd_mux_026:src_data -> row_23_s1_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                              // row_23_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [31:0] cmd_mux_026_src_channel;                                                            // cmd_mux_026:src_channel -> row_23_s1_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                      // cmd_mux_026:src_startofpacket -> row_23_s1_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                        // cmd_mux_026:src_endofpacket -> row_23_s1_agent:cp_endofpacket
	wire   [31:0] row_10_s1_agent_m0_readdata;                                                        // row_10_s1_translator:uav_readdata -> row_10_s1_agent:m0_readdata
	wire          row_10_s1_agent_m0_waitrequest;                                                     // row_10_s1_translator:uav_waitrequest -> row_10_s1_agent:m0_waitrequest
	wire          row_10_s1_agent_m0_debugaccess;                                                     // row_10_s1_agent:m0_debugaccess -> row_10_s1_translator:uav_debugaccess
	wire   [25:0] row_10_s1_agent_m0_address;                                                         // row_10_s1_agent:m0_address -> row_10_s1_translator:uav_address
	wire    [3:0] row_10_s1_agent_m0_byteenable;                                                      // row_10_s1_agent:m0_byteenable -> row_10_s1_translator:uav_byteenable
	wire          row_10_s1_agent_m0_read;                                                            // row_10_s1_agent:m0_read -> row_10_s1_translator:uav_read
	wire          row_10_s1_agent_m0_readdatavalid;                                                   // row_10_s1_translator:uav_readdatavalid -> row_10_s1_agent:m0_readdatavalid
	wire          row_10_s1_agent_m0_lock;                                                            // row_10_s1_agent:m0_lock -> row_10_s1_translator:uav_lock
	wire   [31:0] row_10_s1_agent_m0_writedata;                                                       // row_10_s1_agent:m0_writedata -> row_10_s1_translator:uav_writedata
	wire          row_10_s1_agent_m0_write;                                                           // row_10_s1_agent:m0_write -> row_10_s1_translator:uav_write
	wire    [2:0] row_10_s1_agent_m0_burstcount;                                                      // row_10_s1_agent:m0_burstcount -> row_10_s1_translator:uav_burstcount
	wire          row_10_s1_agent_rf_source_valid;                                                    // row_10_s1_agent:rf_source_valid -> row_10_s1_agent_rsp_fifo:in_valid
	wire  [106:0] row_10_s1_agent_rf_source_data;                                                     // row_10_s1_agent:rf_source_data -> row_10_s1_agent_rsp_fifo:in_data
	wire          row_10_s1_agent_rf_source_ready;                                                    // row_10_s1_agent_rsp_fifo:in_ready -> row_10_s1_agent:rf_source_ready
	wire          row_10_s1_agent_rf_source_startofpacket;                                            // row_10_s1_agent:rf_source_startofpacket -> row_10_s1_agent_rsp_fifo:in_startofpacket
	wire          row_10_s1_agent_rf_source_endofpacket;                                              // row_10_s1_agent:rf_source_endofpacket -> row_10_s1_agent_rsp_fifo:in_endofpacket
	wire          row_10_s1_agent_rsp_fifo_out_valid;                                                 // row_10_s1_agent_rsp_fifo:out_valid -> row_10_s1_agent:rf_sink_valid
	wire  [106:0] row_10_s1_agent_rsp_fifo_out_data;                                                  // row_10_s1_agent_rsp_fifo:out_data -> row_10_s1_agent:rf_sink_data
	wire          row_10_s1_agent_rsp_fifo_out_ready;                                                 // row_10_s1_agent:rf_sink_ready -> row_10_s1_agent_rsp_fifo:out_ready
	wire          row_10_s1_agent_rsp_fifo_out_startofpacket;                                         // row_10_s1_agent_rsp_fifo:out_startofpacket -> row_10_s1_agent:rf_sink_startofpacket
	wire          row_10_s1_agent_rsp_fifo_out_endofpacket;                                           // row_10_s1_agent_rsp_fifo:out_endofpacket -> row_10_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_027_src_valid;                                                              // cmd_mux_027:src_valid -> row_10_s1_agent:cp_valid
	wire  [105:0] cmd_mux_027_src_data;                                                               // cmd_mux_027:src_data -> row_10_s1_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                              // row_10_s1_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [31:0] cmd_mux_027_src_channel;                                                            // cmd_mux_027:src_channel -> row_10_s1_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                      // cmd_mux_027:src_startofpacket -> row_10_s1_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                        // cmd_mux_027:src_endofpacket -> row_10_s1_agent:cp_endofpacket
	wire   [31:0] move_left_s1_agent_m0_readdata;                                                     // move_left_s1_translator:uav_readdata -> move_left_s1_agent:m0_readdata
	wire          move_left_s1_agent_m0_waitrequest;                                                  // move_left_s1_translator:uav_waitrequest -> move_left_s1_agent:m0_waitrequest
	wire          move_left_s1_agent_m0_debugaccess;                                                  // move_left_s1_agent:m0_debugaccess -> move_left_s1_translator:uav_debugaccess
	wire   [25:0] move_left_s1_agent_m0_address;                                                      // move_left_s1_agent:m0_address -> move_left_s1_translator:uav_address
	wire    [3:0] move_left_s1_agent_m0_byteenable;                                                   // move_left_s1_agent:m0_byteenable -> move_left_s1_translator:uav_byteenable
	wire          move_left_s1_agent_m0_read;                                                         // move_left_s1_agent:m0_read -> move_left_s1_translator:uav_read
	wire          move_left_s1_agent_m0_readdatavalid;                                                // move_left_s1_translator:uav_readdatavalid -> move_left_s1_agent:m0_readdatavalid
	wire          move_left_s1_agent_m0_lock;                                                         // move_left_s1_agent:m0_lock -> move_left_s1_translator:uav_lock
	wire   [31:0] move_left_s1_agent_m0_writedata;                                                    // move_left_s1_agent:m0_writedata -> move_left_s1_translator:uav_writedata
	wire          move_left_s1_agent_m0_write;                                                        // move_left_s1_agent:m0_write -> move_left_s1_translator:uav_write
	wire    [2:0] move_left_s1_agent_m0_burstcount;                                                   // move_left_s1_agent:m0_burstcount -> move_left_s1_translator:uav_burstcount
	wire          move_left_s1_agent_rf_source_valid;                                                 // move_left_s1_agent:rf_source_valid -> move_left_s1_agent_rsp_fifo:in_valid
	wire  [106:0] move_left_s1_agent_rf_source_data;                                                  // move_left_s1_agent:rf_source_data -> move_left_s1_agent_rsp_fifo:in_data
	wire          move_left_s1_agent_rf_source_ready;                                                 // move_left_s1_agent_rsp_fifo:in_ready -> move_left_s1_agent:rf_source_ready
	wire          move_left_s1_agent_rf_source_startofpacket;                                         // move_left_s1_agent:rf_source_startofpacket -> move_left_s1_agent_rsp_fifo:in_startofpacket
	wire          move_left_s1_agent_rf_source_endofpacket;                                           // move_left_s1_agent:rf_source_endofpacket -> move_left_s1_agent_rsp_fifo:in_endofpacket
	wire          move_left_s1_agent_rsp_fifo_out_valid;                                              // move_left_s1_agent_rsp_fifo:out_valid -> move_left_s1_agent:rf_sink_valid
	wire  [106:0] move_left_s1_agent_rsp_fifo_out_data;                                               // move_left_s1_agent_rsp_fifo:out_data -> move_left_s1_agent:rf_sink_data
	wire          move_left_s1_agent_rsp_fifo_out_ready;                                              // move_left_s1_agent:rf_sink_ready -> move_left_s1_agent_rsp_fifo:out_ready
	wire          move_left_s1_agent_rsp_fifo_out_startofpacket;                                      // move_left_s1_agent_rsp_fifo:out_startofpacket -> move_left_s1_agent:rf_sink_startofpacket
	wire          move_left_s1_agent_rsp_fifo_out_endofpacket;                                        // move_left_s1_agent_rsp_fifo:out_endofpacket -> move_left_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_028_src_valid;                                                              // cmd_mux_028:src_valid -> move_left_s1_agent:cp_valid
	wire  [105:0] cmd_mux_028_src_data;                                                               // cmd_mux_028:src_data -> move_left_s1_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                              // move_left_s1_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [31:0] cmd_mux_028_src_channel;                                                            // cmd_mux_028:src_channel -> move_left_s1_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                      // cmd_mux_028:src_startofpacket -> move_left_s1_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                        // cmd_mux_028:src_endofpacket -> move_left_s1_agent:cp_endofpacket
	wire   [31:0] move_right_s1_agent_m0_readdata;                                                    // move_right_s1_translator:uav_readdata -> move_right_s1_agent:m0_readdata
	wire          move_right_s1_agent_m0_waitrequest;                                                 // move_right_s1_translator:uav_waitrequest -> move_right_s1_agent:m0_waitrequest
	wire          move_right_s1_agent_m0_debugaccess;                                                 // move_right_s1_agent:m0_debugaccess -> move_right_s1_translator:uav_debugaccess
	wire   [25:0] move_right_s1_agent_m0_address;                                                     // move_right_s1_agent:m0_address -> move_right_s1_translator:uav_address
	wire    [3:0] move_right_s1_agent_m0_byteenable;                                                  // move_right_s1_agent:m0_byteenable -> move_right_s1_translator:uav_byteenable
	wire          move_right_s1_agent_m0_read;                                                        // move_right_s1_agent:m0_read -> move_right_s1_translator:uav_read
	wire          move_right_s1_agent_m0_readdatavalid;                                               // move_right_s1_translator:uav_readdatavalid -> move_right_s1_agent:m0_readdatavalid
	wire          move_right_s1_agent_m0_lock;                                                        // move_right_s1_agent:m0_lock -> move_right_s1_translator:uav_lock
	wire   [31:0] move_right_s1_agent_m0_writedata;                                                   // move_right_s1_agent:m0_writedata -> move_right_s1_translator:uav_writedata
	wire          move_right_s1_agent_m0_write;                                                       // move_right_s1_agent:m0_write -> move_right_s1_translator:uav_write
	wire    [2:0] move_right_s1_agent_m0_burstcount;                                                  // move_right_s1_agent:m0_burstcount -> move_right_s1_translator:uav_burstcount
	wire          move_right_s1_agent_rf_source_valid;                                                // move_right_s1_agent:rf_source_valid -> move_right_s1_agent_rsp_fifo:in_valid
	wire  [106:0] move_right_s1_agent_rf_source_data;                                                 // move_right_s1_agent:rf_source_data -> move_right_s1_agent_rsp_fifo:in_data
	wire          move_right_s1_agent_rf_source_ready;                                                // move_right_s1_agent_rsp_fifo:in_ready -> move_right_s1_agent:rf_source_ready
	wire          move_right_s1_agent_rf_source_startofpacket;                                        // move_right_s1_agent:rf_source_startofpacket -> move_right_s1_agent_rsp_fifo:in_startofpacket
	wire          move_right_s1_agent_rf_source_endofpacket;                                          // move_right_s1_agent:rf_source_endofpacket -> move_right_s1_agent_rsp_fifo:in_endofpacket
	wire          move_right_s1_agent_rsp_fifo_out_valid;                                             // move_right_s1_agent_rsp_fifo:out_valid -> move_right_s1_agent:rf_sink_valid
	wire  [106:0] move_right_s1_agent_rsp_fifo_out_data;                                              // move_right_s1_agent_rsp_fifo:out_data -> move_right_s1_agent:rf_sink_data
	wire          move_right_s1_agent_rsp_fifo_out_ready;                                             // move_right_s1_agent:rf_sink_ready -> move_right_s1_agent_rsp_fifo:out_ready
	wire          move_right_s1_agent_rsp_fifo_out_startofpacket;                                     // move_right_s1_agent_rsp_fifo:out_startofpacket -> move_right_s1_agent:rf_sink_startofpacket
	wire          move_right_s1_agent_rsp_fifo_out_endofpacket;                                       // move_right_s1_agent_rsp_fifo:out_endofpacket -> move_right_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_029_src_valid;                                                              // cmd_mux_029:src_valid -> move_right_s1_agent:cp_valid
	wire  [105:0] cmd_mux_029_src_data;                                                               // cmd_mux_029:src_data -> move_right_s1_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                              // move_right_s1_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [31:0] cmd_mux_029_src_channel;                                                            // cmd_mux_029:src_channel -> move_right_s1_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                      // cmd_mux_029:src_startofpacket -> move_right_s1_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                        // cmd_mux_029:src_endofpacket -> move_right_s1_agent:cp_endofpacket
	wire   [31:0] rotate_left_s1_agent_m0_readdata;                                                   // rotate_left_s1_translator:uav_readdata -> rotate_left_s1_agent:m0_readdata
	wire          rotate_left_s1_agent_m0_waitrequest;                                                // rotate_left_s1_translator:uav_waitrequest -> rotate_left_s1_agent:m0_waitrequest
	wire          rotate_left_s1_agent_m0_debugaccess;                                                // rotate_left_s1_agent:m0_debugaccess -> rotate_left_s1_translator:uav_debugaccess
	wire   [25:0] rotate_left_s1_agent_m0_address;                                                    // rotate_left_s1_agent:m0_address -> rotate_left_s1_translator:uav_address
	wire    [3:0] rotate_left_s1_agent_m0_byteenable;                                                 // rotate_left_s1_agent:m0_byteenable -> rotate_left_s1_translator:uav_byteenable
	wire          rotate_left_s1_agent_m0_read;                                                       // rotate_left_s1_agent:m0_read -> rotate_left_s1_translator:uav_read
	wire          rotate_left_s1_agent_m0_readdatavalid;                                              // rotate_left_s1_translator:uav_readdatavalid -> rotate_left_s1_agent:m0_readdatavalid
	wire          rotate_left_s1_agent_m0_lock;                                                       // rotate_left_s1_agent:m0_lock -> rotate_left_s1_translator:uav_lock
	wire   [31:0] rotate_left_s1_agent_m0_writedata;                                                  // rotate_left_s1_agent:m0_writedata -> rotate_left_s1_translator:uav_writedata
	wire          rotate_left_s1_agent_m0_write;                                                      // rotate_left_s1_agent:m0_write -> rotate_left_s1_translator:uav_write
	wire    [2:0] rotate_left_s1_agent_m0_burstcount;                                                 // rotate_left_s1_agent:m0_burstcount -> rotate_left_s1_translator:uav_burstcount
	wire          rotate_left_s1_agent_rf_source_valid;                                               // rotate_left_s1_agent:rf_source_valid -> rotate_left_s1_agent_rsp_fifo:in_valid
	wire  [106:0] rotate_left_s1_agent_rf_source_data;                                                // rotate_left_s1_agent:rf_source_data -> rotate_left_s1_agent_rsp_fifo:in_data
	wire          rotate_left_s1_agent_rf_source_ready;                                               // rotate_left_s1_agent_rsp_fifo:in_ready -> rotate_left_s1_agent:rf_source_ready
	wire          rotate_left_s1_agent_rf_source_startofpacket;                                       // rotate_left_s1_agent:rf_source_startofpacket -> rotate_left_s1_agent_rsp_fifo:in_startofpacket
	wire          rotate_left_s1_agent_rf_source_endofpacket;                                         // rotate_left_s1_agent:rf_source_endofpacket -> rotate_left_s1_agent_rsp_fifo:in_endofpacket
	wire          rotate_left_s1_agent_rsp_fifo_out_valid;                                            // rotate_left_s1_agent_rsp_fifo:out_valid -> rotate_left_s1_agent:rf_sink_valid
	wire  [106:0] rotate_left_s1_agent_rsp_fifo_out_data;                                             // rotate_left_s1_agent_rsp_fifo:out_data -> rotate_left_s1_agent:rf_sink_data
	wire          rotate_left_s1_agent_rsp_fifo_out_ready;                                            // rotate_left_s1_agent:rf_sink_ready -> rotate_left_s1_agent_rsp_fifo:out_ready
	wire          rotate_left_s1_agent_rsp_fifo_out_startofpacket;                                    // rotate_left_s1_agent_rsp_fifo:out_startofpacket -> rotate_left_s1_agent:rf_sink_startofpacket
	wire          rotate_left_s1_agent_rsp_fifo_out_endofpacket;                                      // rotate_left_s1_agent_rsp_fifo:out_endofpacket -> rotate_left_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_030_src_valid;                                                              // cmd_mux_030:src_valid -> rotate_left_s1_agent:cp_valid
	wire  [105:0] cmd_mux_030_src_data;                                                               // cmd_mux_030:src_data -> rotate_left_s1_agent:cp_data
	wire          cmd_mux_030_src_ready;                                                              // rotate_left_s1_agent:cp_ready -> cmd_mux_030:src_ready
	wire   [31:0] cmd_mux_030_src_channel;                                                            // cmd_mux_030:src_channel -> rotate_left_s1_agent:cp_channel
	wire          cmd_mux_030_src_startofpacket;                                                      // cmd_mux_030:src_startofpacket -> rotate_left_s1_agent:cp_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                        // cmd_mux_030:src_endofpacket -> rotate_left_s1_agent:cp_endofpacket
	wire   [31:0] rotate_right_s1_agent_m0_readdata;                                                  // rotate_right_s1_translator:uav_readdata -> rotate_right_s1_agent:m0_readdata
	wire          rotate_right_s1_agent_m0_waitrequest;                                               // rotate_right_s1_translator:uav_waitrequest -> rotate_right_s1_agent:m0_waitrequest
	wire          rotate_right_s1_agent_m0_debugaccess;                                               // rotate_right_s1_agent:m0_debugaccess -> rotate_right_s1_translator:uav_debugaccess
	wire   [25:0] rotate_right_s1_agent_m0_address;                                                   // rotate_right_s1_agent:m0_address -> rotate_right_s1_translator:uav_address
	wire    [3:0] rotate_right_s1_agent_m0_byteenable;                                                // rotate_right_s1_agent:m0_byteenable -> rotate_right_s1_translator:uav_byteenable
	wire          rotate_right_s1_agent_m0_read;                                                      // rotate_right_s1_agent:m0_read -> rotate_right_s1_translator:uav_read
	wire          rotate_right_s1_agent_m0_readdatavalid;                                             // rotate_right_s1_translator:uav_readdatavalid -> rotate_right_s1_agent:m0_readdatavalid
	wire          rotate_right_s1_agent_m0_lock;                                                      // rotate_right_s1_agent:m0_lock -> rotate_right_s1_translator:uav_lock
	wire   [31:0] rotate_right_s1_agent_m0_writedata;                                                 // rotate_right_s1_agent:m0_writedata -> rotate_right_s1_translator:uav_writedata
	wire          rotate_right_s1_agent_m0_write;                                                     // rotate_right_s1_agent:m0_write -> rotate_right_s1_translator:uav_write
	wire    [2:0] rotate_right_s1_agent_m0_burstcount;                                                // rotate_right_s1_agent:m0_burstcount -> rotate_right_s1_translator:uav_burstcount
	wire          rotate_right_s1_agent_rf_source_valid;                                              // rotate_right_s1_agent:rf_source_valid -> rotate_right_s1_agent_rsp_fifo:in_valid
	wire  [106:0] rotate_right_s1_agent_rf_source_data;                                               // rotate_right_s1_agent:rf_source_data -> rotate_right_s1_agent_rsp_fifo:in_data
	wire          rotate_right_s1_agent_rf_source_ready;                                              // rotate_right_s1_agent_rsp_fifo:in_ready -> rotate_right_s1_agent:rf_source_ready
	wire          rotate_right_s1_agent_rf_source_startofpacket;                                      // rotate_right_s1_agent:rf_source_startofpacket -> rotate_right_s1_agent_rsp_fifo:in_startofpacket
	wire          rotate_right_s1_agent_rf_source_endofpacket;                                        // rotate_right_s1_agent:rf_source_endofpacket -> rotate_right_s1_agent_rsp_fifo:in_endofpacket
	wire          rotate_right_s1_agent_rsp_fifo_out_valid;                                           // rotate_right_s1_agent_rsp_fifo:out_valid -> rotate_right_s1_agent:rf_sink_valid
	wire  [106:0] rotate_right_s1_agent_rsp_fifo_out_data;                                            // rotate_right_s1_agent_rsp_fifo:out_data -> rotate_right_s1_agent:rf_sink_data
	wire          rotate_right_s1_agent_rsp_fifo_out_ready;                                           // rotate_right_s1_agent:rf_sink_ready -> rotate_right_s1_agent_rsp_fifo:out_ready
	wire          rotate_right_s1_agent_rsp_fifo_out_startofpacket;                                   // rotate_right_s1_agent_rsp_fifo:out_startofpacket -> rotate_right_s1_agent:rf_sink_startofpacket
	wire          rotate_right_s1_agent_rsp_fifo_out_endofpacket;                                     // rotate_right_s1_agent_rsp_fifo:out_endofpacket -> rotate_right_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_031_src_valid;                                                              // cmd_mux_031:src_valid -> rotate_right_s1_agent:cp_valid
	wire  [105:0] cmd_mux_031_src_data;                                                               // cmd_mux_031:src_data -> rotate_right_s1_agent:cp_data
	wire          cmd_mux_031_src_ready;                                                              // rotate_right_s1_agent:cp_ready -> cmd_mux_031:src_ready
	wire   [31:0] cmd_mux_031_src_channel;                                                            // cmd_mux_031:src_channel -> rotate_right_s1_agent:cp_channel
	wire          cmd_mux_031_src_startofpacket;                                                      // cmd_mux_031:src_startofpacket -> rotate_right_s1_agent:cp_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                        // cmd_mux_031:src_endofpacket -> rotate_right_s1_agent:cp_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [105:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [105:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [31:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [105:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [31:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [105:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [31:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rp_valid;                                            // sram_0_avalon_sram_slave_agent:rp_valid -> router_003:sink_valid
	wire   [87:0] sram_0_avalon_sram_slave_agent_rp_data;                                             // sram_0_avalon_sram_slave_agent:rp_data -> router_003:sink_data
	wire          sram_0_avalon_sram_slave_agent_rp_ready;                                            // router_003:sink_ready -> sram_0_avalon_sram_slave_agent:rp_ready
	wire          sram_0_avalon_sram_slave_agent_rp_startofpacket;                                    // sram_0_avalon_sram_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rp_endofpacket;                                      // sram_0_avalon_sram_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [31:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_005:sink_valid
	wire   [87:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_005:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_005:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          row_0_s1_agent_rp_valid;                                                            // row_0_s1_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] row_0_s1_agent_rp_data;                                                             // row_0_s1_agent:rp_data -> router_006:sink_data
	wire          row_0_s1_agent_rp_ready;                                                            // router_006:sink_ready -> row_0_s1_agent:rp_ready
	wire          row_0_s1_agent_rp_startofpacket;                                                    // row_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          row_0_s1_agent_rp_endofpacket;                                                      // row_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [31:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          row_1_s1_agent_rp_valid;                                                            // row_1_s1_agent:rp_valid -> router_007:sink_valid
	wire  [105:0] row_1_s1_agent_rp_data;                                                             // row_1_s1_agent:rp_data -> router_007:sink_data
	wire          row_1_s1_agent_rp_ready;                                                            // router_007:sink_ready -> row_1_s1_agent:rp_ready
	wire          row_1_s1_agent_rp_startofpacket;                                                    // row_1_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          row_1_s1_agent_rp_endofpacket;                                                      // row_1_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [31:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          row_2_s1_agent_rp_valid;                                                            // row_2_s1_agent:rp_valid -> router_008:sink_valid
	wire  [105:0] row_2_s1_agent_rp_data;                                                             // row_2_s1_agent:rp_data -> router_008:sink_data
	wire          row_2_s1_agent_rp_ready;                                                            // router_008:sink_ready -> row_2_s1_agent:rp_ready
	wire          row_2_s1_agent_rp_startofpacket;                                                    // row_2_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          row_2_s1_agent_rp_endofpacket;                                                      // row_2_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [105:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [31:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          row_3_s1_agent_rp_valid;                                                            // row_3_s1_agent:rp_valid -> router_009:sink_valid
	wire  [105:0] row_3_s1_agent_rp_data;                                                             // row_3_s1_agent:rp_data -> router_009:sink_data
	wire          row_3_s1_agent_rp_ready;                                                            // router_009:sink_ready -> row_3_s1_agent:rp_ready
	wire          row_3_s1_agent_rp_startofpacket;                                                    // row_3_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          row_3_s1_agent_rp_endofpacket;                                                      // row_3_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [105:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [31:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          row_4_s1_agent_rp_valid;                                                            // row_4_s1_agent:rp_valid -> router_010:sink_valid
	wire  [105:0] row_4_s1_agent_rp_data;                                                             // row_4_s1_agent:rp_data -> router_010:sink_data
	wire          row_4_s1_agent_rp_ready;                                                            // router_010:sink_ready -> row_4_s1_agent:rp_ready
	wire          row_4_s1_agent_rp_startofpacket;                                                    // row_4_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          row_4_s1_agent_rp_endofpacket;                                                      // row_4_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [105:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [31:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          row_5_s1_agent_rp_valid;                                                            // row_5_s1_agent:rp_valid -> router_011:sink_valid
	wire  [105:0] row_5_s1_agent_rp_data;                                                             // row_5_s1_agent:rp_data -> router_011:sink_data
	wire          row_5_s1_agent_rp_ready;                                                            // router_011:sink_ready -> row_5_s1_agent:rp_ready
	wire          row_5_s1_agent_rp_startofpacket;                                                    // row_5_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          row_5_s1_agent_rp_endofpacket;                                                      // row_5_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [105:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [31:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          row_6_s1_agent_rp_valid;                                                            // row_6_s1_agent:rp_valid -> router_012:sink_valid
	wire  [105:0] row_6_s1_agent_rp_data;                                                             // row_6_s1_agent:rp_data -> router_012:sink_data
	wire          row_6_s1_agent_rp_ready;                                                            // router_012:sink_ready -> row_6_s1_agent:rp_ready
	wire          row_6_s1_agent_rp_startofpacket;                                                    // row_6_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          row_6_s1_agent_rp_endofpacket;                                                      // row_6_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [105:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [31:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          row_7_s1_agent_rp_valid;                                                            // row_7_s1_agent:rp_valid -> router_013:sink_valid
	wire  [105:0] row_7_s1_agent_rp_data;                                                             // row_7_s1_agent:rp_data -> router_013:sink_data
	wire          row_7_s1_agent_rp_ready;                                                            // router_013:sink_ready -> row_7_s1_agent:rp_ready
	wire          row_7_s1_agent_rp_startofpacket;                                                    // row_7_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          row_7_s1_agent_rp_endofpacket;                                                      // row_7_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [105:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [31:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          row_8_s1_agent_rp_valid;                                                            // row_8_s1_agent:rp_valid -> router_014:sink_valid
	wire  [105:0] row_8_s1_agent_rp_data;                                                             // row_8_s1_agent:rp_data -> router_014:sink_data
	wire          row_8_s1_agent_rp_ready;                                                            // router_014:sink_ready -> row_8_s1_agent:rp_ready
	wire          row_8_s1_agent_rp_startofpacket;                                                    // row_8_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          row_8_s1_agent_rp_endofpacket;                                                      // row_8_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [105:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [31:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          row_9_s1_agent_rp_valid;                                                            // row_9_s1_agent:rp_valid -> router_015:sink_valid
	wire  [105:0] row_9_s1_agent_rp_data;                                                             // row_9_s1_agent:rp_data -> router_015:sink_data
	wire          row_9_s1_agent_rp_ready;                                                            // router_015:sink_ready -> row_9_s1_agent:rp_ready
	wire          row_9_s1_agent_rp_startofpacket;                                                    // row_9_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          row_9_s1_agent_rp_endofpacket;                                                      // row_9_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [105:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [31:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          row_11_s1_agent_rp_valid;                                                           // row_11_s1_agent:rp_valid -> router_016:sink_valid
	wire  [105:0] row_11_s1_agent_rp_data;                                                            // row_11_s1_agent:rp_data -> router_016:sink_data
	wire          row_11_s1_agent_rp_ready;                                                           // router_016:sink_ready -> row_11_s1_agent:rp_ready
	wire          row_11_s1_agent_rp_startofpacket;                                                   // row_11_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          row_11_s1_agent_rp_endofpacket;                                                     // row_11_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [105:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [31:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          row_12_s1_agent_rp_valid;                                                           // row_12_s1_agent:rp_valid -> router_017:sink_valid
	wire  [105:0] row_12_s1_agent_rp_data;                                                            // row_12_s1_agent:rp_data -> router_017:sink_data
	wire          row_12_s1_agent_rp_ready;                                                           // router_017:sink_ready -> row_12_s1_agent:rp_ready
	wire          row_12_s1_agent_rp_startofpacket;                                                   // row_12_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          row_12_s1_agent_rp_endofpacket;                                                     // row_12_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [105:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [31:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          row_13_s1_agent_rp_valid;                                                           // row_13_s1_agent:rp_valid -> router_018:sink_valid
	wire  [105:0] row_13_s1_agent_rp_data;                                                            // row_13_s1_agent:rp_data -> router_018:sink_data
	wire          row_13_s1_agent_rp_ready;                                                           // router_018:sink_ready -> row_13_s1_agent:rp_ready
	wire          row_13_s1_agent_rp_startofpacket;                                                   // row_13_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          row_13_s1_agent_rp_endofpacket;                                                     // row_13_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [105:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [31:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          row_14_s1_agent_rp_valid;                                                           // row_14_s1_agent:rp_valid -> router_019:sink_valid
	wire  [105:0] row_14_s1_agent_rp_data;                                                            // row_14_s1_agent:rp_data -> router_019:sink_data
	wire          row_14_s1_agent_rp_ready;                                                           // router_019:sink_ready -> row_14_s1_agent:rp_ready
	wire          row_14_s1_agent_rp_startofpacket;                                                   // row_14_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          row_14_s1_agent_rp_endofpacket;                                                     // row_14_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [105:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [31:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          row_15_s1_agent_rp_valid;                                                           // row_15_s1_agent:rp_valid -> router_020:sink_valid
	wire  [105:0] row_15_s1_agent_rp_data;                                                            // row_15_s1_agent:rp_data -> router_020:sink_data
	wire          row_15_s1_agent_rp_ready;                                                           // router_020:sink_ready -> row_15_s1_agent:rp_ready
	wire          row_15_s1_agent_rp_startofpacket;                                                   // row_15_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          row_15_s1_agent_rp_endofpacket;                                                     // row_15_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [105:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [31:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          row_16_s1_agent_rp_valid;                                                           // row_16_s1_agent:rp_valid -> router_021:sink_valid
	wire  [105:0] row_16_s1_agent_rp_data;                                                            // row_16_s1_agent:rp_data -> router_021:sink_data
	wire          row_16_s1_agent_rp_ready;                                                           // router_021:sink_ready -> row_16_s1_agent:rp_ready
	wire          row_16_s1_agent_rp_startofpacket;                                                   // row_16_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          row_16_s1_agent_rp_endofpacket;                                                     // row_16_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [105:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [31:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          row_17_s1_agent_rp_valid;                                                           // row_17_s1_agent:rp_valid -> router_022:sink_valid
	wire  [105:0] row_17_s1_agent_rp_data;                                                            // row_17_s1_agent:rp_data -> router_022:sink_data
	wire          row_17_s1_agent_rp_ready;                                                           // router_022:sink_ready -> row_17_s1_agent:rp_ready
	wire          row_17_s1_agent_rp_startofpacket;                                                   // row_17_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          row_17_s1_agent_rp_endofpacket;                                                     // row_17_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [105:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [31:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          row_18_s1_agent_rp_valid;                                                           // row_18_s1_agent:rp_valid -> router_023:sink_valid
	wire  [105:0] row_18_s1_agent_rp_data;                                                            // row_18_s1_agent:rp_data -> router_023:sink_data
	wire          row_18_s1_agent_rp_ready;                                                           // router_023:sink_ready -> row_18_s1_agent:rp_ready
	wire          row_18_s1_agent_rp_startofpacket;                                                   // row_18_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          row_18_s1_agent_rp_endofpacket;                                                     // row_18_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [105:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [31:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          row_19_s1_agent_rp_valid;                                                           // row_19_s1_agent:rp_valid -> router_024:sink_valid
	wire  [105:0] row_19_s1_agent_rp_data;                                                            // row_19_s1_agent:rp_data -> router_024:sink_data
	wire          row_19_s1_agent_rp_ready;                                                           // router_024:sink_ready -> row_19_s1_agent:rp_ready
	wire          row_19_s1_agent_rp_startofpacket;                                                   // row_19_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          row_19_s1_agent_rp_endofpacket;                                                     // row_19_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [105:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [31:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          row_20_s1_agent_rp_valid;                                                           // row_20_s1_agent:rp_valid -> router_025:sink_valid
	wire  [105:0] row_20_s1_agent_rp_data;                                                            // row_20_s1_agent:rp_data -> router_025:sink_data
	wire          row_20_s1_agent_rp_ready;                                                           // router_025:sink_ready -> row_20_s1_agent:rp_ready
	wire          row_20_s1_agent_rp_startofpacket;                                                   // row_20_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          row_20_s1_agent_rp_endofpacket;                                                     // row_20_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [105:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [31:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          row_21_s1_agent_rp_valid;                                                           // row_21_s1_agent:rp_valid -> router_026:sink_valid
	wire  [105:0] row_21_s1_agent_rp_data;                                                            // row_21_s1_agent:rp_data -> router_026:sink_data
	wire          row_21_s1_agent_rp_ready;                                                           // router_026:sink_ready -> row_21_s1_agent:rp_ready
	wire          row_21_s1_agent_rp_startofpacket;                                                   // row_21_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          row_21_s1_agent_rp_endofpacket;                                                     // row_21_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [105:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [31:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          row_22_s1_agent_rp_valid;                                                           // row_22_s1_agent:rp_valid -> router_027:sink_valid
	wire  [105:0] row_22_s1_agent_rp_data;                                                            // row_22_s1_agent:rp_data -> router_027:sink_data
	wire          row_22_s1_agent_rp_ready;                                                           // router_027:sink_ready -> row_22_s1_agent:rp_ready
	wire          row_22_s1_agent_rp_startofpacket;                                                   // row_22_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          row_22_s1_agent_rp_endofpacket;                                                     // row_22_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [105:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                               // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [31:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          row_23_s1_agent_rp_valid;                                                           // row_23_s1_agent:rp_valid -> router_028:sink_valid
	wire  [105:0] row_23_s1_agent_rp_data;                                                            // row_23_s1_agent:rp_data -> router_028:sink_data
	wire          row_23_s1_agent_rp_ready;                                                           // router_028:sink_ready -> row_23_s1_agent:rp_ready
	wire          row_23_s1_agent_rp_startofpacket;                                                   // row_23_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          row_23_s1_agent_rp_endofpacket;                                                     // row_23_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                               // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [105:0] router_028_src_data;                                                                // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                               // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [31:0] router_028_src_channel;                                                             // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                                       // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                                         // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          row_10_s1_agent_rp_valid;                                                           // row_10_s1_agent:rp_valid -> router_029:sink_valid
	wire  [105:0] row_10_s1_agent_rp_data;                                                            // row_10_s1_agent:rp_data -> router_029:sink_data
	wire          row_10_s1_agent_rp_ready;                                                           // router_029:sink_ready -> row_10_s1_agent:rp_ready
	wire          row_10_s1_agent_rp_startofpacket;                                                   // row_10_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          row_10_s1_agent_rp_endofpacket;                                                     // row_10_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                               // router_029:src_valid -> rsp_demux_027:sink_valid
	wire  [105:0] router_029_src_data;                                                                // router_029:src_data -> rsp_demux_027:sink_data
	wire          router_029_src_ready;                                                               // rsp_demux_027:sink_ready -> router_029:src_ready
	wire   [31:0] router_029_src_channel;                                                             // router_029:src_channel -> rsp_demux_027:sink_channel
	wire          router_029_src_startofpacket;                                                       // router_029:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_029_src_endofpacket;                                                         // router_029:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          move_left_s1_agent_rp_valid;                                                        // move_left_s1_agent:rp_valid -> router_030:sink_valid
	wire  [105:0] move_left_s1_agent_rp_data;                                                         // move_left_s1_agent:rp_data -> router_030:sink_data
	wire          move_left_s1_agent_rp_ready;                                                        // router_030:sink_ready -> move_left_s1_agent:rp_ready
	wire          move_left_s1_agent_rp_startofpacket;                                                // move_left_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          move_left_s1_agent_rp_endofpacket;                                                  // move_left_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                               // router_030:src_valid -> rsp_demux_028:sink_valid
	wire  [105:0] router_030_src_data;                                                                // router_030:src_data -> rsp_demux_028:sink_data
	wire          router_030_src_ready;                                                               // rsp_demux_028:sink_ready -> router_030:src_ready
	wire   [31:0] router_030_src_channel;                                                             // router_030:src_channel -> rsp_demux_028:sink_channel
	wire          router_030_src_startofpacket;                                                       // router_030:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_030_src_endofpacket;                                                         // router_030:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          move_right_s1_agent_rp_valid;                                                       // move_right_s1_agent:rp_valid -> router_031:sink_valid
	wire  [105:0] move_right_s1_agent_rp_data;                                                        // move_right_s1_agent:rp_data -> router_031:sink_data
	wire          move_right_s1_agent_rp_ready;                                                       // router_031:sink_ready -> move_right_s1_agent:rp_ready
	wire          move_right_s1_agent_rp_startofpacket;                                               // move_right_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          move_right_s1_agent_rp_endofpacket;                                                 // move_right_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                               // router_031:src_valid -> rsp_demux_029:sink_valid
	wire  [105:0] router_031_src_data;                                                                // router_031:src_data -> rsp_demux_029:sink_data
	wire          router_031_src_ready;                                                               // rsp_demux_029:sink_ready -> router_031:src_ready
	wire   [31:0] router_031_src_channel;                                                             // router_031:src_channel -> rsp_demux_029:sink_channel
	wire          router_031_src_startofpacket;                                                       // router_031:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_031_src_endofpacket;                                                         // router_031:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          rotate_left_s1_agent_rp_valid;                                                      // rotate_left_s1_agent:rp_valid -> router_032:sink_valid
	wire  [105:0] rotate_left_s1_agent_rp_data;                                                       // rotate_left_s1_agent:rp_data -> router_032:sink_data
	wire          rotate_left_s1_agent_rp_ready;                                                      // router_032:sink_ready -> rotate_left_s1_agent:rp_ready
	wire          rotate_left_s1_agent_rp_startofpacket;                                              // rotate_left_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          rotate_left_s1_agent_rp_endofpacket;                                                // rotate_left_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                               // router_032:src_valid -> rsp_demux_030:sink_valid
	wire  [105:0] router_032_src_data;                                                                // router_032:src_data -> rsp_demux_030:sink_data
	wire          router_032_src_ready;                                                               // rsp_demux_030:sink_ready -> router_032:src_ready
	wire   [31:0] router_032_src_channel;                                                             // router_032:src_channel -> rsp_demux_030:sink_channel
	wire          router_032_src_startofpacket;                                                       // router_032:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_032_src_endofpacket;                                                         // router_032:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          rotate_right_s1_agent_rp_valid;                                                     // rotate_right_s1_agent:rp_valid -> router_033:sink_valid
	wire  [105:0] rotate_right_s1_agent_rp_data;                                                      // rotate_right_s1_agent:rp_data -> router_033:sink_data
	wire          rotate_right_s1_agent_rp_ready;                                                     // router_033:sink_ready -> rotate_right_s1_agent:rp_ready
	wire          rotate_right_s1_agent_rp_startofpacket;                                             // rotate_right_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          rotate_right_s1_agent_rp_endofpacket;                                               // rotate_right_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                               // router_033:src_valid -> rsp_demux_031:sink_valid
	wire  [105:0] router_033_src_data;                                                                // router_033:src_data -> rsp_demux_031:sink_data
	wire          router_033_src_ready;                                                               // rsp_demux_031:sink_ready -> router_033:src_ready
	wire   [31:0] router_033_src_channel;                                                             // router_033:src_channel -> rsp_demux_031:sink_channel
	wire          router_033_src_startofpacket;                                                       // router_033:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_033_src_endofpacket;                                                         // router_033:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_valid;                               // sram_0_avalon_sram_slave_burst_adapter:source0_valid -> sram_0_avalon_sram_slave_agent:cp_valid
	wire   [87:0] sram_0_avalon_sram_slave_burst_adapter_source0_data;                                // sram_0_avalon_sram_slave_burst_adapter:source0_data -> sram_0_avalon_sram_slave_agent:cp_data
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_ready;                               // sram_0_avalon_sram_slave_agent:cp_ready -> sram_0_avalon_sram_slave_burst_adapter:source0_ready
	wire   [31:0] sram_0_avalon_sram_slave_burst_adapter_source0_channel;                             // sram_0_avalon_sram_slave_burst_adapter:source0_channel -> sram_0_avalon_sram_slave_agent:cp_channel
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket;                       // sram_0_avalon_sram_slave_burst_adapter:source0_startofpacket -> sram_0_avalon_sram_slave_agent:cp_startofpacket
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket;                         // sram_0_avalon_sram_slave_burst_adapter:source0_endofpacket -> sram_0_avalon_sram_slave_agent:cp_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                    // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire   [87:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                     // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                    // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire   [31:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                                  // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                            // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                              // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [105:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [31:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [31:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [31:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [31:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [31:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [31:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [105:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [31:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [105:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [31:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [105:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [31:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [105:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [31:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [105:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [31:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [105:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [31:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [105:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [31:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [105:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [31:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [105:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [31:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [105:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [31:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [105:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [31:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [105:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [31:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [105:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [31:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [105:0] cmd_demux_src19_data;                                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [31:0] cmd_demux_src19_channel;                                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                              // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [105:0] cmd_demux_src20_data;                                                               // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                              // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [31:0] cmd_demux_src20_channel;                                                            // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                      // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                        // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                              // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [105:0] cmd_demux_src21_data;                                                               // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                              // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [31:0] cmd_demux_src21_channel;                                                            // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                      // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                        // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                              // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [105:0] cmd_demux_src22_data;                                                               // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                              // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [31:0] cmd_demux_src22_channel;                                                            // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                      // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                        // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                              // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [105:0] cmd_demux_src23_data;                                                               // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                              // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [31:0] cmd_demux_src23_channel;                                                            // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                      // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                        // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                              // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [105:0] cmd_demux_src24_data;                                                               // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                              // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [31:0] cmd_demux_src24_channel;                                                            // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                      // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                        // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                              // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [105:0] cmd_demux_src25_data;                                                               // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                              // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [31:0] cmd_demux_src25_channel;                                                            // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                      // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                        // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                              // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [105:0] cmd_demux_src26_data;                                                               // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                              // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [31:0] cmd_demux_src26_channel;                                                            // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                      // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                        // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_src27_valid;                                                              // cmd_demux:src27_valid -> cmd_mux_027:sink0_valid
	wire  [105:0] cmd_demux_src27_data;                                                               // cmd_demux:src27_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_src27_ready;                                                              // cmd_mux_027:sink0_ready -> cmd_demux:src27_ready
	wire   [31:0] cmd_demux_src27_channel;                                                            // cmd_demux:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_src27_startofpacket;                                                      // cmd_demux:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_src27_endofpacket;                                                        // cmd_demux:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_src28_valid;                                                              // cmd_demux:src28_valid -> cmd_mux_028:sink0_valid
	wire  [105:0] cmd_demux_src28_data;                                                               // cmd_demux:src28_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_src28_ready;                                                              // cmd_mux_028:sink0_ready -> cmd_demux:src28_ready
	wire   [31:0] cmd_demux_src28_channel;                                                            // cmd_demux:src28_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_src28_startofpacket;                                                      // cmd_demux:src28_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_src28_endofpacket;                                                        // cmd_demux:src28_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_src29_valid;                                                              // cmd_demux:src29_valid -> cmd_mux_029:sink0_valid
	wire  [105:0] cmd_demux_src29_data;                                                               // cmd_demux:src29_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_src29_ready;                                                              // cmd_mux_029:sink0_ready -> cmd_demux:src29_ready
	wire   [31:0] cmd_demux_src29_channel;                                                            // cmd_demux:src29_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_src29_startofpacket;                                                      // cmd_demux:src29_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_src29_endofpacket;                                                        // cmd_demux:src29_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_src30_valid;                                                              // cmd_demux:src30_valid -> cmd_mux_030:sink0_valid
	wire  [105:0] cmd_demux_src30_data;                                                               // cmd_demux:src30_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_src30_ready;                                                              // cmd_mux_030:sink0_ready -> cmd_demux:src30_ready
	wire   [31:0] cmd_demux_src30_channel;                                                            // cmd_demux:src30_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_src30_startofpacket;                                                      // cmd_demux:src30_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_src30_endofpacket;                                                        // cmd_demux:src30_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_src31_valid;                                                              // cmd_demux:src31_valid -> cmd_mux_031:sink0_valid
	wire  [105:0] cmd_demux_src31_data;                                                               // cmd_demux:src31_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_src31_ready;                                                              // cmd_mux_031:sink0_ready -> cmd_demux:src31_ready
	wire   [31:0] cmd_demux_src31_channel;                                                            // cmd_demux:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_src31_startofpacket;                                                      // cmd_demux:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_src31_endofpacket;                                                        // cmd_demux:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [105:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire   [31:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [105:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src1_ready;                                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire   [31:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire  [105:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src2_ready;                                                           // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire   [31:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [105:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [31:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [105:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [31:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire   [31:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [31:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire   [31:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [31:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src1_ready;                                                           // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire   [31:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [105:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [31:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [105:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [31:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [105:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [31:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [105:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [31:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [105:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [31:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [105:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [31:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [105:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [31:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [105:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [31:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [105:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [31:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [105:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [31:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [105:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [31:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [105:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [31:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [105:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [31:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [105:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [31:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [105:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [31:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [105:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [31:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [105:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [31:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [105:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [31:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [105:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [31:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [105:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [31:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                           // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [105:0] rsp_demux_024_src0_data;                                                            // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                           // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [31:0] rsp_demux_024_src0_channel;                                                         // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                   // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                     // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                           // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [105:0] rsp_demux_025_src0_data;                                                            // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                           // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [31:0] rsp_demux_025_src0_channel;                                                         // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                   // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                     // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                           // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [105:0] rsp_demux_026_src0_data;                                                            // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                           // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [31:0] rsp_demux_026_src0_channel;                                                         // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                   // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                     // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_027_src0_valid;                                                           // rsp_demux_027:src0_valid -> rsp_mux:sink27_valid
	wire  [105:0] rsp_demux_027_src0_data;                                                            // rsp_demux_027:src0_data -> rsp_mux:sink27_data
	wire          rsp_demux_027_src0_ready;                                                           // rsp_mux:sink27_ready -> rsp_demux_027:src0_ready
	wire   [31:0] rsp_demux_027_src0_channel;                                                         // rsp_demux_027:src0_channel -> rsp_mux:sink27_channel
	wire          rsp_demux_027_src0_startofpacket;                                                   // rsp_demux_027:src0_startofpacket -> rsp_mux:sink27_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                     // rsp_demux_027:src0_endofpacket -> rsp_mux:sink27_endofpacket
	wire          rsp_demux_028_src0_valid;                                                           // rsp_demux_028:src0_valid -> rsp_mux:sink28_valid
	wire  [105:0] rsp_demux_028_src0_data;                                                            // rsp_demux_028:src0_data -> rsp_mux:sink28_data
	wire          rsp_demux_028_src0_ready;                                                           // rsp_mux:sink28_ready -> rsp_demux_028:src0_ready
	wire   [31:0] rsp_demux_028_src0_channel;                                                         // rsp_demux_028:src0_channel -> rsp_mux:sink28_channel
	wire          rsp_demux_028_src0_startofpacket;                                                   // rsp_demux_028:src0_startofpacket -> rsp_mux:sink28_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                     // rsp_demux_028:src0_endofpacket -> rsp_mux:sink28_endofpacket
	wire          rsp_demux_029_src0_valid;                                                           // rsp_demux_029:src0_valid -> rsp_mux:sink29_valid
	wire  [105:0] rsp_demux_029_src0_data;                                                            // rsp_demux_029:src0_data -> rsp_mux:sink29_data
	wire          rsp_demux_029_src0_ready;                                                           // rsp_mux:sink29_ready -> rsp_demux_029:src0_ready
	wire   [31:0] rsp_demux_029_src0_channel;                                                         // rsp_demux_029:src0_channel -> rsp_mux:sink29_channel
	wire          rsp_demux_029_src0_startofpacket;                                                   // rsp_demux_029:src0_startofpacket -> rsp_mux:sink29_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                     // rsp_demux_029:src0_endofpacket -> rsp_mux:sink29_endofpacket
	wire          rsp_demux_030_src0_valid;                                                           // rsp_demux_030:src0_valid -> rsp_mux:sink30_valid
	wire  [105:0] rsp_demux_030_src0_data;                                                            // rsp_demux_030:src0_data -> rsp_mux:sink30_data
	wire          rsp_demux_030_src0_ready;                                                           // rsp_mux:sink30_ready -> rsp_demux_030:src0_ready
	wire   [31:0] rsp_demux_030_src0_channel;                                                         // rsp_demux_030:src0_channel -> rsp_mux:sink30_channel
	wire          rsp_demux_030_src0_startofpacket;                                                   // rsp_demux_030:src0_startofpacket -> rsp_mux:sink30_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                     // rsp_demux_030:src0_endofpacket -> rsp_mux:sink30_endofpacket
	wire          rsp_demux_031_src0_valid;                                                           // rsp_demux_031:src0_valid -> rsp_mux:sink31_valid
	wire  [105:0] rsp_demux_031_src0_data;                                                            // rsp_demux_031:src0_data -> rsp_mux:sink31_data
	wire          rsp_demux_031_src0_ready;                                                           // rsp_mux:sink31_ready -> rsp_demux_031:src0_ready
	wire   [31:0] rsp_demux_031_src0_channel;                                                         // rsp_demux_031:src0_channel -> rsp_mux:sink31_channel
	wire          rsp_demux_031_src0_startofpacket;                                                   // rsp_demux_031:src0_startofpacket -> rsp_mux:sink31_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                     // rsp_demux_031:src0_endofpacket -> rsp_mux:sink31_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> sram_0_avalon_sram_slave_rsp_width_adapter:in_valid
	wire   [87:0] router_003_src_data;                                                                // router_003:src_data -> sram_0_avalon_sram_slave_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                               // sram_0_avalon_sram_slave_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [31:0] router_003_src_channel;                                                             // router_003:src_channel -> sram_0_avalon_sram_slave_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> sram_0_avalon_sram_slave_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> sram_0_avalon_sram_slave_rsp_width_adapter:in_endofpacket
	wire          sram_0_avalon_sram_slave_rsp_width_adapter_src_valid;                               // sram_0_avalon_sram_slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [105:0] sram_0_avalon_sram_slave_rsp_width_adapter_src_data;                                // sram_0_avalon_sram_slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          sram_0_avalon_sram_slave_rsp_width_adapter_src_ready;                               // rsp_demux_001:sink_ready -> sram_0_avalon_sram_slave_rsp_width_adapter:out_ready
	wire   [31:0] sram_0_avalon_sram_slave_rsp_width_adapter_src_channel;                             // sram_0_avalon_sram_slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          sram_0_avalon_sram_slave_rsp_width_adapter_src_startofpacket;                       // sram_0_avalon_sram_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          sram_0_avalon_sram_slave_rsp_width_adapter_src_endofpacket;                         // sram_0_avalon_sram_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> onchip_memory2_0_s1_rsp_width_adapter:in_valid
	wire   [87:0] router_005_src_data;                                                                // router_005:src_data -> onchip_memory2_0_s1_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                               // onchip_memory2_0_s1_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [31:0] router_005_src_channel;                                                             // router_005:src_channel -> onchip_memory2_0_s1_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> onchip_memory2_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> onchip_memory2_0_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_valid;                                    // onchip_memory2_0_s1_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [105:0] onchip_memory2_0_s1_rsp_width_adapter_src_data;                                     // onchip_memory2_0_s1_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_ready;                                    // rsp_demux_003:sink_ready -> onchip_memory2_0_s1_rsp_width_adapter:out_ready
	wire   [31:0] onchip_memory2_0_s1_rsp_width_adapter_src_channel;                                  // onchip_memory2_0_s1_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket;                            // onchip_memory2_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket;                              // onchip_memory2_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> sram_0_avalon_sram_slave_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> sram_0_avalon_sram_slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                              // sram_0_avalon_sram_slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [31:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> sram_0_avalon_sram_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> sram_0_avalon_sram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> sram_0_avalon_sram_slave_cmd_width_adapter:in_endofpacket
	wire          sram_0_avalon_sram_slave_cmd_width_adapter_src_valid;                               // sram_0_avalon_sram_slave_cmd_width_adapter:out_valid -> sram_0_avalon_sram_slave_burst_adapter:sink0_valid
	wire   [87:0] sram_0_avalon_sram_slave_cmd_width_adapter_src_data;                                // sram_0_avalon_sram_slave_cmd_width_adapter:out_data -> sram_0_avalon_sram_slave_burst_adapter:sink0_data
	wire          sram_0_avalon_sram_slave_cmd_width_adapter_src_ready;                               // sram_0_avalon_sram_slave_burst_adapter:sink0_ready -> sram_0_avalon_sram_slave_cmd_width_adapter:out_ready
	wire   [31:0] sram_0_avalon_sram_slave_cmd_width_adapter_src_channel;                             // sram_0_avalon_sram_slave_cmd_width_adapter:out_channel -> sram_0_avalon_sram_slave_burst_adapter:sink0_channel
	wire          sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket;                       // sram_0_avalon_sram_slave_cmd_width_adapter:out_startofpacket -> sram_0_avalon_sram_slave_burst_adapter:sink0_startofpacket
	wire          sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket;                         // sram_0_avalon_sram_slave_cmd_width_adapter:out_endofpacket -> sram_0_avalon_sram_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                              // onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [31:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_valid;                                    // onchip_memory2_0_s1_cmd_width_adapter:out_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire   [87:0] onchip_memory2_0_s1_cmd_width_adapter_src_data;                                     // onchip_memory2_0_s1_cmd_width_adapter:out_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_ready;                                    // onchip_memory2_0_s1_burst_adapter:sink0_ready -> onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire   [31:0] onchip_memory2_0_s1_cmd_width_adapter_src_channel;                                  // onchip_memory2_0_s1_cmd_width_adapter:out_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;                            // onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;                              // onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid;                                // sram_0_avalon_sram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [17:0] sram_0_avalon_sram_slave_agent_rdata_fifo_out_data;                                 // sram_0_avalon_sram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_001:in_0_ready -> sram_0_avalon_sram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // sram_0_avalon_sram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_003:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          row_0_s1_agent_rdata_fifo_src_valid;                                                // row_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] row_0_s1_agent_rdata_fifo_src_data;                                                 // row_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          row_0_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_004:in_0_ready -> row_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> row_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> row_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // row_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> row_0_s1_agent:rdata_fifo_sink_error
	wire          row_1_s1_agent_rdata_fifo_src_valid;                                                // row_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] row_1_s1_agent_rdata_fifo_src_data;                                                 // row_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          row_1_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_005:in_0_ready -> row_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> row_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> row_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // row_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> row_1_s1_agent:rdata_fifo_sink_error
	wire          row_2_s1_agent_rdata_fifo_src_valid;                                                // row_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] row_2_s1_agent_rdata_fifo_src_data;                                                 // row_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          row_2_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_006:in_0_ready -> row_2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> row_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> row_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // row_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> row_2_s1_agent:rdata_fifo_sink_error
	wire          row_3_s1_agent_rdata_fifo_src_valid;                                                // row_3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] row_3_s1_agent_rdata_fifo_src_data;                                                 // row_3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          row_3_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_007:in_0_ready -> row_3_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> row_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> row_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // row_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> row_3_s1_agent:rdata_fifo_sink_error
	wire          row_4_s1_agent_rdata_fifo_src_valid;                                                // row_4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] row_4_s1_agent_rdata_fifo_src_data;                                                 // row_4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          row_4_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_008:in_0_ready -> row_4_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> row_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> row_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // row_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> row_4_s1_agent:rdata_fifo_sink_error
	wire          row_5_s1_agent_rdata_fifo_src_valid;                                                // row_5_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] row_5_s1_agent_rdata_fifo_src_data;                                                 // row_5_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          row_5_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_009:in_0_ready -> row_5_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> row_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> row_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // row_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> row_5_s1_agent:rdata_fifo_sink_error
	wire          row_6_s1_agent_rdata_fifo_src_valid;                                                // row_6_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] row_6_s1_agent_rdata_fifo_src_data;                                                 // row_6_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          row_6_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_010:in_0_ready -> row_6_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> row_6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> row_6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // row_6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> row_6_s1_agent:rdata_fifo_sink_error
	wire          row_7_s1_agent_rdata_fifo_src_valid;                                                // row_7_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] row_7_s1_agent_rdata_fifo_src_data;                                                 // row_7_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          row_7_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_011:in_0_ready -> row_7_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> row_7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> row_7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // row_7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> row_7_s1_agent:rdata_fifo_sink_error
	wire          row_8_s1_agent_rdata_fifo_src_valid;                                                // row_8_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] row_8_s1_agent_rdata_fifo_src_data;                                                 // row_8_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          row_8_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_012:in_0_ready -> row_8_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> row_8_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> row_8_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // row_8_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> row_8_s1_agent:rdata_fifo_sink_error
	wire          row_9_s1_agent_rdata_fifo_src_valid;                                                // row_9_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] row_9_s1_agent_rdata_fifo_src_data;                                                 // row_9_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          row_9_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_013:in_0_ready -> row_9_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> row_9_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> row_9_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // row_9_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> row_9_s1_agent:rdata_fifo_sink_error
	wire          row_11_s1_agent_rdata_fifo_src_valid;                                               // row_11_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] row_11_s1_agent_rdata_fifo_src_data;                                                // row_11_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          row_11_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_014:in_0_ready -> row_11_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> row_11_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> row_11_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // row_11_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> row_11_s1_agent:rdata_fifo_sink_error
	wire          row_12_s1_agent_rdata_fifo_src_valid;                                               // row_12_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] row_12_s1_agent_rdata_fifo_src_data;                                                // row_12_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          row_12_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_015:in_0_ready -> row_12_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> row_12_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> row_12_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // row_12_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> row_12_s1_agent:rdata_fifo_sink_error
	wire          row_13_s1_agent_rdata_fifo_src_valid;                                               // row_13_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] row_13_s1_agent_rdata_fifo_src_data;                                                // row_13_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          row_13_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_016:in_0_ready -> row_13_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> row_13_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> row_13_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // row_13_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> row_13_s1_agent:rdata_fifo_sink_error
	wire          row_14_s1_agent_rdata_fifo_src_valid;                                               // row_14_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] row_14_s1_agent_rdata_fifo_src_data;                                                // row_14_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          row_14_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_017:in_0_ready -> row_14_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> row_14_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> row_14_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // row_14_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> row_14_s1_agent:rdata_fifo_sink_error
	wire          row_15_s1_agent_rdata_fifo_src_valid;                                               // row_15_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] row_15_s1_agent_rdata_fifo_src_data;                                                // row_15_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          row_15_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_018:in_0_ready -> row_15_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> row_15_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> row_15_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // row_15_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> row_15_s1_agent:rdata_fifo_sink_error
	wire          row_16_s1_agent_rdata_fifo_src_valid;                                               // row_16_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] row_16_s1_agent_rdata_fifo_src_data;                                                // row_16_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          row_16_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_019:in_0_ready -> row_16_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                  // avalon_st_adapter_019:out_0_valid -> row_16_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                   // avalon_st_adapter_019:out_0_data -> row_16_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                  // row_16_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                  // avalon_st_adapter_019:out_0_error -> row_16_s1_agent:rdata_fifo_sink_error
	wire          row_17_s1_agent_rdata_fifo_src_valid;                                               // row_17_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] row_17_s1_agent_rdata_fifo_src_data;                                                // row_17_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          row_17_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_020:in_0_ready -> row_17_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                  // avalon_st_adapter_020:out_0_valid -> row_17_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                   // avalon_st_adapter_020:out_0_data -> row_17_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                  // row_17_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                  // avalon_st_adapter_020:out_0_error -> row_17_s1_agent:rdata_fifo_sink_error
	wire          row_18_s1_agent_rdata_fifo_src_valid;                                               // row_18_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] row_18_s1_agent_rdata_fifo_src_data;                                                // row_18_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          row_18_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_021:in_0_ready -> row_18_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                  // avalon_st_adapter_021:out_0_valid -> row_18_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                   // avalon_st_adapter_021:out_0_data -> row_18_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                  // row_18_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                  // avalon_st_adapter_021:out_0_error -> row_18_s1_agent:rdata_fifo_sink_error
	wire          row_19_s1_agent_rdata_fifo_src_valid;                                               // row_19_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] row_19_s1_agent_rdata_fifo_src_data;                                                // row_19_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          row_19_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_022:in_0_ready -> row_19_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                  // avalon_st_adapter_022:out_0_valid -> row_19_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                   // avalon_st_adapter_022:out_0_data -> row_19_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                  // row_19_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                  // avalon_st_adapter_022:out_0_error -> row_19_s1_agent:rdata_fifo_sink_error
	wire          row_20_s1_agent_rdata_fifo_src_valid;                                               // row_20_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] row_20_s1_agent_rdata_fifo_src_data;                                                // row_20_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          row_20_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_023:in_0_ready -> row_20_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                  // avalon_st_adapter_023:out_0_valid -> row_20_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                   // avalon_st_adapter_023:out_0_data -> row_20_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                  // row_20_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                  // avalon_st_adapter_023:out_0_error -> row_20_s1_agent:rdata_fifo_sink_error
	wire          row_21_s1_agent_rdata_fifo_src_valid;                                               // row_21_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] row_21_s1_agent_rdata_fifo_src_data;                                                // row_21_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          row_21_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_024:in_0_ready -> row_21_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                  // avalon_st_adapter_024:out_0_valid -> row_21_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                   // avalon_st_adapter_024:out_0_data -> row_21_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                  // row_21_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                  // avalon_st_adapter_024:out_0_error -> row_21_s1_agent:rdata_fifo_sink_error
	wire          row_22_s1_agent_rdata_fifo_src_valid;                                               // row_22_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] row_22_s1_agent_rdata_fifo_src_data;                                                // row_22_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          row_22_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_025:in_0_ready -> row_22_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                  // avalon_st_adapter_025:out_0_valid -> row_22_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                   // avalon_st_adapter_025:out_0_data -> row_22_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                  // row_22_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                  // avalon_st_adapter_025:out_0_error -> row_22_s1_agent:rdata_fifo_sink_error
	wire          row_23_s1_agent_rdata_fifo_src_valid;                                               // row_23_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] row_23_s1_agent_rdata_fifo_src_data;                                                // row_23_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          row_23_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_026:in_0_ready -> row_23_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                  // avalon_st_adapter_026:out_0_valid -> row_23_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                   // avalon_st_adapter_026:out_0_data -> row_23_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                  // row_23_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                  // avalon_st_adapter_026:out_0_error -> row_23_s1_agent:rdata_fifo_sink_error
	wire          row_10_s1_agent_rdata_fifo_src_valid;                                               // row_10_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] row_10_s1_agent_rdata_fifo_src_data;                                                // row_10_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_027:in_0_data
	wire          row_10_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_027:in_0_ready -> row_10_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                  // avalon_st_adapter_027:out_0_valid -> row_10_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                   // avalon_st_adapter_027:out_0_data -> row_10_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                  // row_10_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                  // avalon_st_adapter_027:out_0_error -> row_10_s1_agent:rdata_fifo_sink_error
	wire          move_left_s1_agent_rdata_fifo_src_valid;                                            // move_left_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] move_left_s1_agent_rdata_fifo_src_data;                                             // move_left_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_028:in_0_data
	wire          move_left_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_028:in_0_ready -> move_left_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                  // avalon_st_adapter_028:out_0_valid -> move_left_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                                   // avalon_st_adapter_028:out_0_data -> move_left_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                  // move_left_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                  // avalon_st_adapter_028:out_0_error -> move_left_s1_agent:rdata_fifo_sink_error
	wire          move_right_s1_agent_rdata_fifo_src_valid;                                           // move_right_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] move_right_s1_agent_rdata_fifo_src_data;                                            // move_right_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_029:in_0_data
	wire          move_right_s1_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_029:in_0_ready -> move_right_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                  // avalon_st_adapter_029:out_0_valid -> move_right_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                                   // avalon_st_adapter_029:out_0_data -> move_right_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                  // move_right_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                  // avalon_st_adapter_029:out_0_error -> move_right_s1_agent:rdata_fifo_sink_error
	wire          rotate_left_s1_agent_rdata_fifo_src_valid;                                          // rotate_left_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_030:in_0_valid
	wire   [33:0] rotate_left_s1_agent_rdata_fifo_src_data;                                           // rotate_left_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_030:in_0_data
	wire          rotate_left_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_030:in_0_ready -> rotate_left_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_030_out_0_valid;                                                  // avalon_st_adapter_030:out_0_valid -> rotate_left_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_030_out_0_data;                                                   // avalon_st_adapter_030:out_0_data -> rotate_left_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                                  // rotate_left_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                                  // avalon_st_adapter_030:out_0_error -> rotate_left_s1_agent:rdata_fifo_sink_error
	wire          rotate_right_s1_agent_rdata_fifo_src_valid;                                         // rotate_right_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_031:in_0_valid
	wire   [33:0] rotate_right_s1_agent_rdata_fifo_src_data;                                          // rotate_right_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_031:in_0_data
	wire          rotate_right_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_031:in_0_ready -> rotate_right_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_031_out_0_valid;                                                  // avalon_st_adapter_031:out_0_valid -> rotate_right_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_031_out_0_data;                                                   // avalon_st_adapter_031:out_0_data -> rotate_right_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                                  // rotate_right_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                                  // avalon_st_adapter_031:out_0_error -> rotate_right_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (22),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_0_avalon_sram_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (sram_0_avalon_sram_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sram_0_avalon_sram_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sram_0_avalon_sram_slave_agent_m0_read),          //                         .read
		.uav_write              (sram_0_avalon_sram_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sram_0_avalon_sram_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sram_0_avalon_sram_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sram_0_avalon_sram_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sram_0_avalon_sram_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sram_0_avalon_sram_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sram_0_avalon_sram_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sram_0_avalon_sram_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sram_0_avalon_sram_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (sram_0_avalon_sram_slave_write),                  //                         .write
		.av_read                (sram_0_avalon_sram_slave_read),                   //                         .read
		.av_readdata            (sram_0_avalon_sram_slave_readdata),               //                         .readdata
		.av_writedata           (sram_0_avalon_sram_slave_writedata),              //                         .writedata
		.av_byteenable          (sram_0_avalon_sram_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (sram_0_avalon_sram_slave_readdatavalid),          //                         .readdatavalid
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_0_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_0_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_0_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_0_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_0_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_0_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_0_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_0_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_0_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_0_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_0_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_0_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_0_s1_write),                                 //                         .write
		.av_readdata            (row_0_s1_readdata),                              //                         .readdata
		.av_writedata           (row_0_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_0_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_1_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_1_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_1_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_1_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_1_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_1_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_1_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_1_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_1_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_1_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_1_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_1_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_1_s1_write),                                 //                         .write
		.av_readdata            (row_1_s1_readdata),                              //                         .readdata
		.av_writedata           (row_1_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_1_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_2_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_2_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_2_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_2_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_2_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_2_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_2_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_2_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_2_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_2_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_2_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_2_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_2_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_2_s1_write),                                 //                         .write
		.av_readdata            (row_2_s1_readdata),                              //                         .readdata
		.av_writedata           (row_2_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_2_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_3_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_3_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_3_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_3_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_3_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_3_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_3_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_3_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_3_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_3_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_3_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_3_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_3_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_3_s1_write),                                 //                         .write
		.av_readdata            (row_3_s1_readdata),                              //                         .readdata
		.av_writedata           (row_3_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_3_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_4_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_4_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_4_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_4_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_4_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_4_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_4_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_4_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_4_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_4_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_4_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_4_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_4_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_4_s1_write),                                 //                         .write
		.av_readdata            (row_4_s1_readdata),                              //                         .readdata
		.av_writedata           (row_4_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_4_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_5_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_5_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_5_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_5_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_5_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_5_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_5_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_5_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_5_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_5_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_5_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_5_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_5_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_5_s1_write),                                 //                         .write
		.av_readdata            (row_5_s1_readdata),                              //                         .readdata
		.av_writedata           (row_5_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_5_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_6_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_6_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_6_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_6_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_6_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_6_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_6_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_6_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_6_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_6_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_6_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_6_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_6_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_6_s1_write),                                 //                         .write
		.av_readdata            (row_6_s1_readdata),                              //                         .readdata
		.av_writedata           (row_6_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_6_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_7_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_7_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_7_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_7_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_7_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_7_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_7_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_7_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_7_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_7_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_7_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_7_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_7_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_7_s1_write),                                 //                         .write
		.av_readdata            (row_7_s1_readdata),                              //                         .readdata
		.av_writedata           (row_7_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_7_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_8_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_8_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_8_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_8_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_8_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_8_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_8_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_8_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_8_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_8_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_8_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_8_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_8_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_8_s1_write),                                 //                         .write
		.av_readdata            (row_8_s1_readdata),                              //                         .readdata
		.av_writedata           (row_8_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_8_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_9_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_9_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (row_9_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (row_9_s1_agent_m0_read),                         //                         .read
		.uav_write              (row_9_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (row_9_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (row_9_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (row_9_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (row_9_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (row_9_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (row_9_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (row_9_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (row_9_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (row_9_s1_write),                                 //                         .write
		.av_readdata            (row_9_s1_readdata),                              //                         .readdata
		.av_writedata           (row_9_s1_writedata),                             //                         .writedata
		.av_chipselect          (row_9_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_11_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_11_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_11_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_11_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_11_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_11_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_11_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_11_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_11_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_11_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_11_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_11_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_11_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_11_s1_write),                                //                         .write
		.av_readdata            (row_11_s1_readdata),                             //                         .readdata
		.av_writedata           (row_11_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_11_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_12_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_12_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_12_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_12_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_12_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_12_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_12_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_12_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_12_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_12_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_12_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_12_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_12_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_12_s1_write),                                //                         .write
		.av_readdata            (row_12_s1_readdata),                             //                         .readdata
		.av_writedata           (row_12_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_12_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_13_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_13_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_13_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_13_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_13_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_13_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_13_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_13_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_13_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_13_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_13_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_13_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_13_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_13_s1_write),                                //                         .write
		.av_readdata            (row_13_s1_readdata),                             //                         .readdata
		.av_writedata           (row_13_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_13_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_14_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_14_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_14_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_14_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_14_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_14_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_14_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_14_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_14_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_14_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_14_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_14_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_14_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_14_s1_write),                                //                         .write
		.av_readdata            (row_14_s1_readdata),                             //                         .readdata
		.av_writedata           (row_14_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_14_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_15_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_15_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_15_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_15_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_15_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_15_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_15_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_15_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_15_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_15_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_15_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_15_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_15_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_15_s1_write),                                //                         .write
		.av_readdata            (row_15_s1_readdata),                             //                         .readdata
		.av_writedata           (row_15_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_15_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_16_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_16_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_16_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_16_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_16_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_16_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_16_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_16_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_16_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_16_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_16_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_16_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_16_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_16_s1_write),                                //                         .write
		.av_readdata            (row_16_s1_readdata),                             //                         .readdata
		.av_writedata           (row_16_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_16_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_17_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_17_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_17_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_17_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_17_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_17_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_17_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_17_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_17_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_17_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_17_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_17_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_17_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_17_s1_write),                                //                         .write
		.av_readdata            (row_17_s1_readdata),                             //                         .readdata
		.av_writedata           (row_17_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_17_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_18_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_18_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_18_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_18_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_18_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_18_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_18_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_18_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_18_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_18_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_18_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_18_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_18_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_18_s1_write),                                //                         .write
		.av_readdata            (row_18_s1_readdata),                             //                         .readdata
		.av_writedata           (row_18_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_18_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_19_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_19_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_19_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_19_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_19_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_19_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_19_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_19_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_19_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_19_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_19_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_19_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_19_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_19_s1_write),                                //                         .write
		.av_readdata            (row_19_s1_readdata),                             //                         .readdata
		.av_writedata           (row_19_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_19_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_20_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_20_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_20_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_20_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_20_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_20_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_20_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_20_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_20_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_20_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_20_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_20_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_20_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_20_s1_write),                                //                         .write
		.av_readdata            (row_20_s1_readdata),                             //                         .readdata
		.av_writedata           (row_20_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_20_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_21_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_21_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_21_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_21_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_21_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_21_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_21_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_21_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_21_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_21_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_21_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_21_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_21_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_21_s1_write),                                //                         .write
		.av_readdata            (row_21_s1_readdata),                             //                         .readdata
		.av_writedata           (row_21_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_21_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_22_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_22_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_22_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_22_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_22_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_22_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_22_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_22_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_22_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_22_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_22_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_22_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_22_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_22_s1_write),                                //                         .write
		.av_readdata            (row_22_s1_readdata),                             //                         .readdata
		.av_writedata           (row_22_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_22_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_23_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_23_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_23_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_23_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_23_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_23_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_23_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_23_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_23_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_23_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_23_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_23_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_23_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_23_s1_write),                                //                         .write
		.av_readdata            (row_23_s1_readdata),                             //                         .readdata
		.av_writedata           (row_23_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_23_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_10_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (row_10_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (row_10_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (row_10_s1_agent_m0_read),                        //                         .read
		.uav_write              (row_10_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (row_10_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (row_10_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (row_10_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (row_10_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (row_10_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (row_10_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (row_10_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (row_10_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (row_10_s1_write),                                //                         .write
		.av_readdata            (row_10_s1_readdata),                             //                         .readdata
		.av_writedata           (row_10_s1_writedata),                            //                         .writedata
		.av_chipselect          (row_10_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) move_left_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (move_left_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (move_left_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (move_left_s1_agent_m0_read),                     //                         .read
		.uav_write              (move_left_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (move_left_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (move_left_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (move_left_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (move_left_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (move_left_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (move_left_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (move_left_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (move_left_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (move_left_s1_write),                             //                         .write
		.av_readdata            (move_left_s1_readdata),                          //                         .readdata
		.av_writedata           (move_left_s1_writedata),                         //                         .writedata
		.av_chipselect          (move_left_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) move_right_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (move_right_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (move_right_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (move_right_s1_agent_m0_read),                    //                         .read
		.uav_write              (move_right_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (move_right_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (move_right_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (move_right_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (move_right_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (move_right_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (move_right_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (move_right_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (move_right_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (move_right_s1_write),                            //                         .write
		.av_readdata            (move_right_s1_readdata),                         //                         .readdata
		.av_writedata           (move_right_s1_writedata),                        //                         .writedata
		.av_chipselect          (move_right_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rotate_left_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rotate_left_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (rotate_left_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (rotate_left_s1_agent_m0_read),                   //                         .read
		.uav_write              (rotate_left_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (rotate_left_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (rotate_left_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (rotate_left_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (rotate_left_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (rotate_left_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (rotate_left_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (rotate_left_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (rotate_left_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (rotate_left_s1_write),                           //                         .write
		.av_readdata            (rotate_left_s1_readdata),                        //                         .readdata
		.av_writedata           (rotate_left_s1_writedata),                       //                         .writedata
		.av_chipselect          (rotate_left_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rotate_right_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rotate_right_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (rotate_right_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (rotate_right_s1_agent_m0_read),                  //                         .read
		.uav_write              (rotate_right_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (rotate_right_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (rotate_right_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (rotate_right_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (rotate_right_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (rotate_right_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (rotate_right_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (rotate_right_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (rotate_right_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (rotate_right_s1_write),                          //                         .write
		.av_readdata            (rotate_right_s1_readdata),                       //                         .readdata
		.av_writedata           (rotate_right_s1_writedata),                      //                         .writedata
		.av_chipselect          (rotate_right_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (32),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_0_avalon_sram_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (sram_0_avalon_sram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_0_avalon_sram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_0_avalon_sram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_0_avalon_sram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_0_avalon_sram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_0_avalon_sram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_0_avalon_sram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_0_avalon_sram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_0_avalon_sram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_0_avalon_sram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_0_avalon_sram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_0_avalon_sram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_0_avalon_sram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_0_avalon_sram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_0_avalon_sram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_0_avalon_sram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_0_avalon_sram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_0_avalon_sram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_0_avalon_sram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_0_avalon_sram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_0_avalon_sram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_0_avalon_sram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_0_avalon_sram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_0_avalon_sram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_0_avalon_sram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_0_avalon_sram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_0_avalon_sram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_avalon_sram_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (sram_0_avalon_sram_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sram_0_avalon_sram_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_0_avalon_sram_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_0_avalon_sram_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_0_avalon_sram_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_0_avalon_sram_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_avalon_sram_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sram_0_avalon_sram_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sram_0_avalon_sram_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_0_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_0_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_0_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_0_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_0_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_0_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_0_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_0_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_0_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_0_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_0_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_0_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_0_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_0_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_0_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_0_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                        //                .channel
		.rf_sink_ready           (row_0_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_0_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_0_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_0_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_0_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_0_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_0_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_0_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_0_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_0_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_0_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_0_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_0_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_0_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_0_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_0_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_0_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_0_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_0_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_0_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_0_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_0_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_0_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_1_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_1_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_1_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_1_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_1_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_1_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_1_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_1_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_1_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_1_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_1_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_1_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_1_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_1_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_1_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_1_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (row_1_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_1_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_1_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_1_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_1_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_1_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_1_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_1_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_1_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_1_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_1_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_1_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_1_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_1_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_1_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_1_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_1_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_1_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_1_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_1_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_1_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_1_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_1_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_2_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_2_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_2_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_2_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_2_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_2_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_2_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_2_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_2_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_2_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_2_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_2_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_2_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_2_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_2_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_2_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_2_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (row_2_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_2_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_2_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_2_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_2_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_2_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_2_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_2_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_2_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_2_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_2_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_2_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_2_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_2_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_2_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_2_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_2_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_2_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_2_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_2_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_2_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_2_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_2_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_3_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_3_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_3_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_3_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_3_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_3_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_3_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_3_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_3_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_3_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_3_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_3_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_3_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_3_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_3_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_3_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_3_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (row_3_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_3_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_3_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_3_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_3_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_3_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_3_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_3_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_3_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_3_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_3_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_3_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_3_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_3_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_3_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_3_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_3_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_3_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_3_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_3_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_3_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_3_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_3_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_4_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_4_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_4_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_4_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_4_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_4_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_4_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_4_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_4_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_4_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_4_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_4_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_4_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_4_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_4_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_4_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_4_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                        //                .channel
		.rf_sink_ready           (row_4_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_4_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_4_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_4_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_4_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_4_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_4_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_4_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_4_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_4_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_4_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_4_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_4_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_4_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_4_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_4_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_4_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_4_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_4_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_4_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_4_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_4_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_4_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_5_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_5_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_5_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_5_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_5_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_5_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_5_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_5_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_5_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_5_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_5_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_5_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_5_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_5_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_5_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_5_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_5_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_009_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                        //                .channel
		.rf_sink_ready           (row_5_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_5_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_5_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_5_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_5_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_5_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_5_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_5_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_5_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_5_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_5_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_5_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_5_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_5_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_5_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_5_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_5_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_5_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_5_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_5_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_5_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_5_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_5_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_6_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_6_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_6_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_6_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_6_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_6_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_6_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_6_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_6_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_6_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_6_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_6_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_6_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_6_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_6_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_6_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_6_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                        //                .channel
		.rf_sink_ready           (row_6_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_6_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_6_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_6_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_6_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_6_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_6_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_6_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_6_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_6_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_6_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_6_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_6_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_6_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_6_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_6_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_6_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_6_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_6_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_6_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_6_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_6_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_6_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_6_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_7_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_7_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_7_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_7_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_7_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_7_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_7_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_7_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_7_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_7_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_7_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_7_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_7_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_7_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_7_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_7_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_7_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_011_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                        //                .channel
		.rf_sink_ready           (row_7_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_7_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_7_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_7_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_7_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_7_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_7_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_7_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_7_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_7_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_7_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_7_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_7_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_7_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_7_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_7_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_7_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_7_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_7_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_7_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_7_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_7_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_7_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_7_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_8_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_8_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_8_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_8_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_8_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_8_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_8_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_8_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_8_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_8_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_8_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_8_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_8_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_8_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_8_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_8_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_8_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_012_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                        //                .channel
		.rf_sink_ready           (row_8_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_8_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_8_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_8_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_8_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_8_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_8_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_8_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_8_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_8_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_8_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_8_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_8_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_8_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_8_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_8_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_8_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_8_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_8_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_8_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_8_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_8_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_8_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_8_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_9_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_9_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (row_9_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (row_9_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (row_9_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (row_9_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (row_9_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (row_9_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (row_9_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (row_9_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (row_9_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (row_9_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (row_9_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (row_9_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (row_9_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (row_9_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (row_9_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_013_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                        //                .channel
		.rf_sink_ready           (row_9_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (row_9_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (row_9_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (row_9_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (row_9_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (row_9_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (row_9_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (row_9_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (row_9_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (row_9_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_9_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_9_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (row_9_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_9_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_9_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (row_9_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (row_9_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (row_9_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (row_9_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (row_9_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (row_9_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (row_9_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (row_9_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (row_9_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_11_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_11_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_11_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_11_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_11_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_11_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_11_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_11_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_11_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_11_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_11_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_11_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_11_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_11_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_11_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_11_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_11_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_014_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                        //                .channel
		.rf_sink_ready           (row_11_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_11_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_11_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_11_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_11_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_11_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_11_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_11_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_11_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_11_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_11_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_11_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_11_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_11_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_11_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_11_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_11_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_11_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_11_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_11_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_11_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_11_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_11_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_11_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_12_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_12_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_12_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_12_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_12_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_12_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_12_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_12_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_12_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_12_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_12_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_12_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_12_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_12_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_12_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_12_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_12_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_015_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                        //                .channel
		.rf_sink_ready           (row_12_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_12_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_12_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_12_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_12_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_12_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_12_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_12_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_12_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_12_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_12_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_12_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_12_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_12_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_12_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_12_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_12_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_12_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_12_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_12_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_12_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_12_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_12_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_12_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_13_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_13_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_13_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_13_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_13_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_13_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_13_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_13_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_13_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_13_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_13_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_13_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_13_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_13_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_13_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_13_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_13_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_016_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                        //                .channel
		.rf_sink_ready           (row_13_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_13_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_13_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_13_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_13_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_13_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_13_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_13_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_13_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_13_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_13_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_13_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_13_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_13_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_13_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_13_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_13_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_13_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_13_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_13_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_13_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_13_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_13_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_13_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_14_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_14_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_14_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_14_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_14_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_14_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_14_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_14_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_14_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_14_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_14_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_14_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_14_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_14_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_14_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_14_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_14_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_017_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                        //                .channel
		.rf_sink_ready           (row_14_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_14_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_14_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_14_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_14_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_14_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_14_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_14_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_14_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_14_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_14_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_14_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_14_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_14_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_14_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_14_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_14_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_14_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_14_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_14_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_14_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_14_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_14_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_14_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_15_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_15_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_15_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_15_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_15_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_15_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_15_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_15_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_15_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_15_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_15_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_15_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_15_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_15_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_15_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_15_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_15_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_018_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                        //                .channel
		.rf_sink_ready           (row_15_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_15_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_15_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_15_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_15_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_15_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_15_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_15_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_15_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_15_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_15_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_15_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_15_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_15_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_15_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_15_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_15_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_15_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_15_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_15_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_15_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_15_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_15_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_15_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_16_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_16_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_16_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_16_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_16_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_16_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_16_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_16_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_16_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_16_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_16_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_16_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_16_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_16_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_16_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_16_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_16_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_019_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                        //                .channel
		.rf_sink_ready           (row_16_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_16_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_16_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_16_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_16_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_16_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_16_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_16_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_16_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_16_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_16_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_16_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_16_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_16_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_16_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_16_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_16_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_16_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_16_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_16_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_16_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_16_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_16_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_16_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_17_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_17_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_17_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_17_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_17_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_17_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_17_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_17_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_17_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_17_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_17_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_17_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_17_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_17_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_17_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_17_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_17_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_020_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                        //                .channel
		.rf_sink_ready           (row_17_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_17_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_17_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_17_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_17_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_17_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_17_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_17_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_17_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_17_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_17_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_17_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_17_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_17_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_17_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_17_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_17_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_17_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_17_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_17_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_17_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_17_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_17_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_17_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_18_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_18_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_18_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_18_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_18_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_18_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_18_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_18_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_18_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_18_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_18_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_18_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_18_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_18_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_18_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_18_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_18_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_021_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                        //                .channel
		.rf_sink_ready           (row_18_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_18_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_18_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_18_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_18_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_18_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_18_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_18_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_18_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_18_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_18_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_18_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_18_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_18_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_18_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_18_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_18_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_18_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_18_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_18_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_18_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_18_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_18_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_18_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_19_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_19_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_19_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_19_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_19_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_19_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_19_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_19_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_19_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_19_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_19_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_19_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_19_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_19_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_19_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_19_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_19_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_022_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                        //                .channel
		.rf_sink_ready           (row_19_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_19_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_19_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_19_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_19_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_19_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_19_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_19_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_19_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_19_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_19_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_19_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_19_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_19_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_19_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_19_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_19_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_19_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_19_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_19_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_19_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_19_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_19_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_19_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_20_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_20_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_20_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_20_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_20_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_20_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_20_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_20_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_20_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_20_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_20_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_20_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_20_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_20_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_20_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_20_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_20_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_023_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                        //                .channel
		.rf_sink_ready           (row_20_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_20_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_20_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_20_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_20_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_20_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_20_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_20_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_20_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_20_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_20_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_20_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_20_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_20_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_20_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_20_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_20_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_20_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_20_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_20_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_20_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_20_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_20_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_20_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_21_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_21_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_21_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_21_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_21_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_21_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_21_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_21_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_21_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_21_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_21_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_21_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_21_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_21_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_21_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_21_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_21_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_024_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                        //                .channel
		.rf_sink_ready           (row_21_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_21_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_21_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_21_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_21_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_21_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_21_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_21_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_21_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_21_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_21_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_21_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_21_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_21_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_21_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_21_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_21_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_21_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_21_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_21_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_21_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_21_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_21_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_21_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_22_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_22_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_22_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_22_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_22_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_22_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_22_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_22_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_22_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_22_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_22_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_22_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_22_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_22_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_22_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_22_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_22_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_025_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                        //                .channel
		.rf_sink_ready           (row_22_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_22_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_22_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_22_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_22_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_22_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_22_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_22_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_22_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_22_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_22_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_22_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_22_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_22_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_22_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_22_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_22_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_22_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_22_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_22_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_22_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_22_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_22_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_22_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_23_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_23_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_23_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_23_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_23_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_23_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_23_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_23_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_23_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_23_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_23_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_23_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_23_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_23_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_23_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_23_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_23_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_026_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                        //                .channel
		.rf_sink_ready           (row_23_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_23_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_23_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_23_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_23_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_23_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_23_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_23_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_23_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_23_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_23_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_23_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_23_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_23_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_23_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_23_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_23_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_23_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_23_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_23_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_23_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_23_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_23_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_23_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) row_10_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (row_10_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (row_10_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (row_10_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (row_10_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (row_10_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (row_10_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (row_10_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (row_10_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (row_10_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (row_10_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (row_10_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (row_10_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (row_10_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (row_10_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (row_10_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (row_10_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_027_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                        //                .channel
		.rf_sink_ready           (row_10_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (row_10_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (row_10_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (row_10_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (row_10_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (row_10_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (row_10_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (row_10_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (row_10_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (row_10_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),              //                .error
		.rdata_fifo_src_ready    (row_10_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_10_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (row_10_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_10_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (row_10_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (row_10_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (row_10_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (row_10_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (row_10_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (row_10_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (row_10_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (row_10_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (row_10_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (row_10_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) move_left_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (move_left_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (move_left_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (move_left_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (move_left_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (move_left_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (move_left_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (move_left_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (move_left_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (move_left_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (move_left_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (move_left_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (move_left_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (move_left_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (move_left_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (move_left_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (move_left_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_028_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                        //                .channel
		.rf_sink_ready           (move_left_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (move_left_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (move_left_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (move_left_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (move_left_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (move_left_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (move_left_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (move_left_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (move_left_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (move_left_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),              //                .error
		.rdata_fifo_src_ready    (move_left_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (move_left_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (move_left_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) move_left_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (move_left_s1_agent_rf_source_data),              //        in.data
		.in_valid          (move_left_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (move_left_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (move_left_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (move_left_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (move_left_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (move_left_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (move_left_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (move_left_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (move_left_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) move_right_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (move_right_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (move_right_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (move_right_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (move_right_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (move_right_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (move_right_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (move_right_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (move_right_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (move_right_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (move_right_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (move_right_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (move_right_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (move_right_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (move_right_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (move_right_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (move_right_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_029_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                        //                .channel
		.rf_sink_ready           (move_right_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (move_right_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (move_right_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (move_right_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (move_right_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (move_right_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (move_right_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (move_right_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (move_right_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (move_right_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),              //                .error
		.rdata_fifo_src_ready    (move_right_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (move_right_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (move_right_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) move_right_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (move_right_s1_agent_rf_source_data),             //        in.data
		.in_valid          (move_right_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (move_right_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (move_right_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (move_right_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (move_right_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (move_right_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (move_right_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (move_right_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (move_right_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rotate_left_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (rotate_left_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rotate_left_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rotate_left_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rotate_left_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rotate_left_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (rotate_left_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rotate_left_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rotate_left_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (rotate_left_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rotate_left_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (rotate_left_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (rotate_left_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rotate_left_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (rotate_left_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (rotate_left_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (rotate_left_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_030_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_030_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_030_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_030_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_030_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_030_src_channel),                         //                .channel
		.rf_sink_ready           (rotate_left_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rotate_left_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rotate_left_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rotate_left_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rotate_left_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rotate_left_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rotate_left_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rotate_left_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rotate_left_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rotate_left_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),               //                .error
		.rdata_fifo_src_ready    (rotate_left_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rotate_left_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rotate_left_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rotate_left_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (rotate_left_s1_agent_rf_source_data),             //        in.data
		.in_valid          (rotate_left_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (rotate_left_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rotate_left_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rotate_left_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rotate_left_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rotate_left_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rotate_left_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rotate_left_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rotate_left_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (32),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rotate_right_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (rotate_right_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rotate_right_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rotate_right_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rotate_right_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rotate_right_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (rotate_right_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rotate_right_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rotate_right_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (rotate_right_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rotate_right_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (rotate_right_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (rotate_right_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rotate_right_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (rotate_right_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (rotate_right_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (rotate_right_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_031_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_031_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_031_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_031_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_031_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_031_src_channel),                          //                .channel
		.rf_sink_ready           (rotate_right_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rotate_right_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rotate_right_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rotate_right_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rotate_right_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rotate_right_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rotate_right_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rotate_right_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rotate_right_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rotate_right_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),                //                .error
		.rdata_fifo_src_ready    (rotate_right_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rotate_right_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rotate_right_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rotate_right_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (rotate_right_s1_agent_rf_source_data),             //        in.data
		.in_valid          (rotate_right_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (rotate_right_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rotate_right_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rotate_right_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rotate_right_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rotate_right_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rotate_right_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rotate_right_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rotate_right_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	sram_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	sram_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	sram_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sram_0_avalon_sram_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sram_0_avalon_sram_slave_agent_rp_valid),         //          .valid
		.sink_data          (sram_0_avalon_sram_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sram_0_avalon_sram_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_0_avalon_sram_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	sram_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	sram_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (row_0_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_0_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_0_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_0_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_0_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (row_1_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_1_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_1_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_1_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_1_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (row_2_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_2_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_2_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_2_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_2_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (row_3_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_3_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_3_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_3_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_3_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (row_4_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_4_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_4_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_4_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_4_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (row_5_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_5_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_5_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_5_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_5_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (row_6_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_6_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_6_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_6_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_6_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (row_7_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_7_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_7_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_7_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_7_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (row_8_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_8_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_8_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_8_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_8_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (row_9_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (row_9_s1_agent_rp_valid),                        //          .valid
		.sink_data          (row_9_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (row_9_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (row_9_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                           //       src.ready
		.src_valid          (router_015_src_valid),                           //          .valid
		.src_data           (router_015_src_data),                            //          .data
		.src_channel        (router_015_src_channel),                         //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (row_11_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_11_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_11_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_11_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_11_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                           //       src.ready
		.src_valid          (router_016_src_valid),                           //          .valid
		.src_data           (router_016_src_data),                            //          .data
		.src_channel        (router_016_src_channel),                         //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (row_12_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_12_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_12_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_12_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_12_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                           //       src.ready
		.src_valid          (router_017_src_valid),                           //          .valid
		.src_data           (router_017_src_data),                            //          .data
		.src_channel        (router_017_src_channel),                         //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (row_13_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_13_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_13_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_13_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_13_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                           //       src.ready
		.src_valid          (router_018_src_valid),                           //          .valid
		.src_data           (router_018_src_data),                            //          .data
		.src_channel        (router_018_src_channel),                         //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (row_14_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_14_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_14_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_14_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_14_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                           //       src.ready
		.src_valid          (router_019_src_valid),                           //          .valid
		.src_data           (router_019_src_data),                            //          .data
		.src_channel        (router_019_src_channel),                         //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (row_15_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_15_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_15_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_15_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_15_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                           //       src.ready
		.src_valid          (router_020_src_valid),                           //          .valid
		.src_data           (router_020_src_data),                            //          .data
		.src_channel        (router_020_src_channel),                         //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (row_16_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_16_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_16_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_16_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_16_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                           //       src.ready
		.src_valid          (router_021_src_valid),                           //          .valid
		.src_data           (router_021_src_data),                            //          .data
		.src_channel        (router_021_src_channel),                         //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (row_17_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_17_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_17_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_17_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_17_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                           //       src.ready
		.src_valid          (router_022_src_valid),                           //          .valid
		.src_data           (router_022_src_data),                            //          .data
		.src_channel        (router_022_src_channel),                         //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_023 (
		.sink_ready         (row_18_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_18_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_18_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_18_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_18_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                           //       src.ready
		.src_valid          (router_023_src_valid),                           //          .valid
		.src_data           (router_023_src_data),                            //          .data
		.src_channel        (router_023_src_channel),                         //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_024 (
		.sink_ready         (row_19_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_19_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_19_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_19_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_19_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                           //       src.ready
		.src_valid          (router_024_src_valid),                           //          .valid
		.src_data           (router_024_src_data),                            //          .data
		.src_channel        (router_024_src_channel),                         //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_025 (
		.sink_ready         (row_20_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_20_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_20_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_20_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_20_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                           //       src.ready
		.src_valid          (router_025_src_valid),                           //          .valid
		.src_data           (router_025_src_data),                            //          .data
		.src_channel        (router_025_src_channel),                         //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_026 (
		.sink_ready         (row_21_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_21_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_21_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_21_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_21_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                           //       src.ready
		.src_valid          (router_026_src_valid),                           //          .valid
		.src_data           (router_026_src_data),                            //          .data
		.src_channel        (router_026_src_channel),                         //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_027 (
		.sink_ready         (row_22_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_22_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_22_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_22_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_22_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                           //       src.ready
		.src_valid          (router_027_src_valid),                           //          .valid
		.src_data           (router_027_src_data),                            //          .data
		.src_channel        (router_027_src_channel),                         //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_028 (
		.sink_ready         (row_23_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_23_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_23_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_23_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_23_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                           //       src.ready
		.src_valid          (router_028_src_valid),                           //          .valid
		.src_data           (router_028_src_data),                            //          .data
		.src_channel        (router_028_src_channel),                         //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_029 (
		.sink_ready         (row_10_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (row_10_s1_agent_rp_valid),                       //          .valid
		.sink_data          (row_10_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (row_10_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (row_10_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                           //       src.ready
		.src_valid          (router_029_src_valid),                           //          .valid
		.src_data           (router_029_src_data),                            //          .data
		.src_channel        (router_029_src_channel),                         //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_030 (
		.sink_ready         (move_left_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (move_left_s1_agent_rp_valid),                    //          .valid
		.sink_data          (move_left_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (move_left_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (move_left_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                           //       src.ready
		.src_valid          (router_030_src_valid),                           //          .valid
		.src_data           (router_030_src_data),                            //          .data
		.src_channel        (router_030_src_channel),                         //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_031 (
		.sink_ready         (move_right_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (move_right_s1_agent_rp_valid),                   //          .valid
		.sink_data          (move_right_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (move_right_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (move_right_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                           //       src.ready
		.src_valid          (router_031_src_valid),                           //          .valid
		.src_data           (router_031_src_data),                            //          .data
		.src_channel        (router_031_src_channel),                         //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_032 (
		.sink_ready         (rotate_left_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (rotate_left_s1_agent_rp_valid),                  //          .valid
		.sink_data          (rotate_left_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (rotate_left_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (rotate_left_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                           //       src.ready
		.src_valid          (router_032_src_valid),                           //          .valid
		.src_data           (router_032_src_data),                            //          .data
		.src_channel        (router_032_src_channel),                         //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_router_002 router_033 (
		.sink_ready         (rotate_right_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (rotate_right_s1_agent_rp_valid),                 //          .valid
		.sink_data          (rotate_right_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (rotate_right_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (rotate_right_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                           //       src.ready
		.src_valid          (router_033_src_valid),                           //          .valid
		.src_data           (router_033_src_data),                            //          .data
		.src_channel        (router_033_src_channel),                         //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (63),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (53),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (55),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sram_0_avalon_sram_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (sram_0_avalon_sram_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_0_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_0_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_0_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_0_avalon_sram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_0_avalon_sram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_0_avalon_sram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_0_avalon_sram_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (63),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (53),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (32),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (55),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	sram_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                          //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                          //          .valid
		.src16_data          (cmd_demux_src16_data),                           //          .data
		.src16_channel       (cmd_demux_src16_channel),                        //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                    //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                          //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                          //          .valid
		.src17_data          (cmd_demux_src17_data),                           //          .data
		.src17_channel       (cmd_demux_src17_channel),                        //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                    //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                          //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                          //          .valid
		.src18_data          (cmd_demux_src18_data),                           //          .data
		.src18_channel       (cmd_demux_src18_channel),                        //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                    //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                          //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                          //          .valid
		.src19_data          (cmd_demux_src19_data),                           //          .data
		.src19_channel       (cmd_demux_src19_channel),                        //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                  //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                    //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                          //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                          //          .valid
		.src20_data          (cmd_demux_src20_data),                           //          .data
		.src20_channel       (cmd_demux_src20_channel),                        //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                  //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                    //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                          //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                          //          .valid
		.src21_data          (cmd_demux_src21_data),                           //          .data
		.src21_channel       (cmd_demux_src21_channel),                        //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                  //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                    //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                          //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                          //          .valid
		.src22_data          (cmd_demux_src22_data),                           //          .data
		.src22_channel       (cmd_demux_src22_channel),                        //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                  //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                    //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                          //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                          //          .valid
		.src23_data          (cmd_demux_src23_data),                           //          .data
		.src23_channel       (cmd_demux_src23_channel),                        //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                  //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                    //          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                          //     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                          //          .valid
		.src24_data          (cmd_demux_src24_data),                           //          .data
		.src24_channel       (cmd_demux_src24_channel),                        //          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                  //          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                    //          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                          //     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                          //          .valid
		.src25_data          (cmd_demux_src25_data),                           //          .data
		.src25_channel       (cmd_demux_src25_channel),                        //          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                  //          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                    //          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                          //     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                          //          .valid
		.src26_data          (cmd_demux_src26_data),                           //          .data
		.src26_channel       (cmd_demux_src26_channel),                        //          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                  //          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket),                    //          .endofpacket
		.src27_ready         (cmd_demux_src27_ready),                          //     src27.ready
		.src27_valid         (cmd_demux_src27_valid),                          //          .valid
		.src27_data          (cmd_demux_src27_data),                           //          .data
		.src27_channel       (cmd_demux_src27_channel),                        //          .channel
		.src27_startofpacket (cmd_demux_src27_startofpacket),                  //          .startofpacket
		.src27_endofpacket   (cmd_demux_src27_endofpacket),                    //          .endofpacket
		.src28_ready         (cmd_demux_src28_ready),                          //     src28.ready
		.src28_valid         (cmd_demux_src28_valid),                          //          .valid
		.src28_data          (cmd_demux_src28_data),                           //          .data
		.src28_channel       (cmd_demux_src28_channel),                        //          .channel
		.src28_startofpacket (cmd_demux_src28_startofpacket),                  //          .startofpacket
		.src28_endofpacket   (cmd_demux_src28_endofpacket),                    //          .endofpacket
		.src29_ready         (cmd_demux_src29_ready),                          //     src29.ready
		.src29_valid         (cmd_demux_src29_valid),                          //          .valid
		.src29_data          (cmd_demux_src29_data),                           //          .data
		.src29_channel       (cmd_demux_src29_channel),                        //          .channel
		.src29_startofpacket (cmd_demux_src29_startofpacket),                  //          .startofpacket
		.src29_endofpacket   (cmd_demux_src29_endofpacket),                    //          .endofpacket
		.src30_ready         (cmd_demux_src30_ready),                          //     src30.ready
		.src30_valid         (cmd_demux_src30_valid),                          //          .valid
		.src30_data          (cmd_demux_src30_data),                           //          .data
		.src30_channel       (cmd_demux_src30_channel),                        //          .channel
		.src30_startofpacket (cmd_demux_src30_startofpacket),                  //          .startofpacket
		.src30_endofpacket   (cmd_demux_src30_endofpacket),                    //          .endofpacket
		.src31_ready         (cmd_demux_src31_ready),                          //     src31.ready
		.src31_valid         (cmd_demux_src31_valid),                          //          .valid
		.src31_data          (cmd_demux_src31_data),                           //          .data
		.src31_channel       (cmd_demux_src31_channel),                        //          .channel
		.src31_startofpacket (cmd_demux_src31_startofpacket),                  //          .startofpacket
		.src31_endofpacket   (cmd_demux_src31_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_001_src1_data),                        //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data          (cmd_demux_001_src2_data),                        //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_mux_009_src_data),                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                         //          .channel
		.sink0_data          (cmd_demux_src9_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_mux_010_src_data),                           //          .data
		.src_channel         (cmd_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                        //          .channel
		.sink0_data          (cmd_demux_src10_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                          //          .valid
		.src_data            (cmd_mux_011_src_data),                           //          .data
		.src_channel         (cmd_mux_011_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                        //          .channel
		.sink0_data          (cmd_demux_src11_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                          //          .valid
		.src_data            (cmd_mux_012_src_data),                           //          .data
		.src_channel         (cmd_mux_012_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                        //          .channel
		.sink0_data          (cmd_demux_src12_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                          //          .valid
		.src_data            (cmd_mux_013_src_data),                           //          .data
		.src_channel         (cmd_mux_013_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                        //          .channel
		.sink0_data          (cmd_demux_src13_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                          //          .valid
		.src_data            (cmd_mux_014_src_data),                           //          .data
		.src_channel         (cmd_mux_014_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                        //          .channel
		.sink0_data          (cmd_demux_src14_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                          //          .valid
		.src_data            (cmd_mux_015_src_data),                           //          .data
		.src_channel         (cmd_mux_015_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                        //          .channel
		.sink0_data          (cmd_demux_src15_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                          //          .valid
		.src_data            (cmd_mux_016_src_data),                           //          .data
		.src_channel         (cmd_mux_016_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                        //          .channel
		.sink0_data          (cmd_demux_src16_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                          //          .valid
		.src_data            (cmd_mux_017_src_data),                           //          .data
		.src_channel         (cmd_mux_017_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                        //          .channel
		.sink0_data          (cmd_demux_src17_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                          //          .valid
		.src_data            (cmd_mux_018_src_data),                           //          .data
		.src_channel         (cmd_mux_018_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                        //          .channel
		.sink0_data          (cmd_demux_src18_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                          //          .valid
		.src_data            (cmd_mux_019_src_data),                           //          .data
		.src_channel         (cmd_mux_019_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                        //          .channel
		.sink0_data          (cmd_demux_src19_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                          //          .valid
		.src_data            (cmd_mux_020_src_data),                           //          .data
		.src_channel         (cmd_mux_020_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                        //          .channel
		.sink0_data          (cmd_demux_src20_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                          //          .valid
		.src_data            (cmd_mux_021_src_data),                           //          .data
		.src_channel         (cmd_mux_021_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                        //          .channel
		.sink0_data          (cmd_demux_src21_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                          //          .valid
		.src_data            (cmd_mux_022_src_data),                           //          .data
		.src_channel         (cmd_mux_022_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                        //          .channel
		.sink0_data          (cmd_demux_src22_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                          //          .valid
		.src_data            (cmd_mux_023_src_data),                           //          .data
		.src_channel         (cmd_mux_023_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                        //          .channel
		.sink0_data          (cmd_demux_src23_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                          //          .valid
		.src_data            (cmd_mux_024_src_data),                           //          .data
		.src_channel         (cmd_mux_024_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                        //          .channel
		.sink0_data          (cmd_demux_src24_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_025 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                          //          .valid
		.src_data            (cmd_mux_025_src_data),                           //          .data
		.src_channel         (cmd_mux_025_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src25_channel),                        //          .channel
		.sink0_data          (cmd_demux_src25_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_026 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                          //          .valid
		.src_data            (cmd_mux_026_src_data),                           //          .data
		.src_channel         (cmd_mux_026_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src26_channel),                        //          .channel
		.sink0_data          (cmd_demux_src26_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_027 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                          //          .valid
		.src_data            (cmd_mux_027_src_data),                           //          .data
		.src_channel         (cmd_mux_027_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src27_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src27_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src27_channel),                        //          .channel
		.sink0_data          (cmd_demux_src27_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src27_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src27_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_028 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                          //          .valid
		.src_data            (cmd_mux_028_src_data),                           //          .data
		.src_channel         (cmd_mux_028_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src28_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src28_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src28_channel),                        //          .channel
		.sink0_data          (cmd_demux_src28_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src28_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src28_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_029 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                          //          .valid
		.src_data            (cmd_mux_029_src_data),                           //          .data
		.src_channel         (cmd_mux_029_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src29_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src29_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src29_channel),                        //          .channel
		.sink0_data          (cmd_demux_src29_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src29_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src29_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_030 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                          //          .valid
		.src_data            (cmd_mux_030_src_data),                           //          .data
		.src_channel         (cmd_mux_030_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src30_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src30_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src30_channel),                        //          .channel
		.sink0_data          (cmd_demux_src30_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src30_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src30_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_cmd_mux cmd_mux_031 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                          //          .valid
		.src_data            (cmd_mux_031_src_data),                           //          .data
		.src_channel         (cmd_mux_031_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src31_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src31_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src31_channel),                        //          .channel
		.sink0_data          (cmd_demux_src31_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src31_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src31_endofpacket)                     //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.sink_ready         (sram_0_avalon_sram_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_0_avalon_sram_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_0_avalon_sram_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_0_avalon_sram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_0_avalon_sram_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_0_avalon_sram_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (onchip_memory2_0_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (onchip_memory2_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (onchip_memory2_0_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (onchip_memory2_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                           //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //      sink.ready
		.sink_channel       (router_014_src_channel),                         //          .channel
		.sink_data          (router_014_src_data),                            //          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_014_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_012_src0_data),                        //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //      sink.ready
		.sink_channel       (router_015_src_channel),                         //          .channel
		.sink_data          (router_015_src_data),                            //          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_015_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_013_src0_data),                        //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                           //      sink.ready
		.sink_channel       (router_016_src_channel),                         //          .channel
		.sink_data          (router_016_src_data),                            //          .data
		.sink_startofpacket (router_016_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_016_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_014_src0_data),                        //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                           //      sink.ready
		.sink_channel       (router_017_src_channel),                         //          .channel
		.sink_data          (router_017_src_data),                            //          .data
		.sink_startofpacket (router_017_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_017_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_015_src0_data),                        //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                           //      sink.ready
		.sink_channel       (router_018_src_channel),                         //          .channel
		.sink_data          (router_018_src_data),                            //          .data
		.sink_startofpacket (router_018_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_018_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_016_src0_data),                        //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                           //      sink.ready
		.sink_channel       (router_019_src_channel),                         //          .channel
		.sink_data          (router_019_src_data),                            //          .data
		.sink_startofpacket (router_019_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_019_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_017_src0_data),                        //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                           //      sink.ready
		.sink_channel       (router_020_src_channel),                         //          .channel
		.sink_data          (router_020_src_data),                            //          .data
		.sink_startofpacket (router_020_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_020_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_018_src0_data),                        //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                           //      sink.ready
		.sink_channel       (router_021_src_channel),                         //          .channel
		.sink_data          (router_021_src_data),                            //          .data
		.sink_startofpacket (router_021_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_021_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_019_src0_data),                        //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                           //      sink.ready
		.sink_channel       (router_022_src_channel),                         //          .channel
		.sink_data          (router_022_src_data),                            //          .data
		.sink_startofpacket (router_022_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_022_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_020_src0_data),                        //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                           //      sink.ready
		.sink_channel       (router_023_src_channel),                         //          .channel
		.sink_data          (router_023_src_data),                            //          .data
		.sink_startofpacket (router_023_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_023_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_021_src0_data),                        //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                           //      sink.ready
		.sink_channel       (router_024_src_channel),                         //          .channel
		.sink_data          (router_024_src_data),                            //          .data
		.sink_startofpacket (router_024_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_024_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_022_src0_data),                        //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                           //      sink.ready
		.sink_channel       (router_025_src_channel),                         //          .channel
		.sink_data          (router_025_src_data),                            //          .data
		.sink_startofpacket (router_025_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_025_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_023_src0_data),                        //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_024 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                           //      sink.ready
		.sink_channel       (router_026_src_channel),                         //          .channel
		.sink_data          (router_026_src_data),                            //          .data
		.sink_startofpacket (router_026_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_026_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_024_src0_data),                        //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_025 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                           //      sink.ready
		.sink_channel       (router_027_src_channel),                         //          .channel
		.sink_data          (router_027_src_data),                            //          .data
		.sink_startofpacket (router_027_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_027_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_025_src0_data),                        //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_026 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                           //      sink.ready
		.sink_channel       (router_028_src_channel),                         //          .channel
		.sink_data          (router_028_src_data),                            //          .data
		.sink_startofpacket (router_028_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_028_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_026_src0_data),                        //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_027 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                           //      sink.ready
		.sink_channel       (router_029_src_channel),                         //          .channel
		.sink_data          (router_029_src_data),                            //          .data
		.sink_startofpacket (router_029_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_029_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_027_src0_data),                        //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_028 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                           //      sink.ready
		.sink_channel       (router_030_src_channel),                         //          .channel
		.sink_data          (router_030_src_data),                            //          .data
		.sink_startofpacket (router_030_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_030_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_028_src0_data),                        //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_029 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                           //      sink.ready
		.sink_channel       (router_031_src_channel),                         //          .channel
		.sink_data          (router_031_src_data),                            //          .data
		.sink_startofpacket (router_031_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_031_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_029_src0_data),                        //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_030 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                           //      sink.ready
		.sink_channel       (router_032_src_channel),                         //          .channel
		.sink_data          (router_032_src_data),                            //          .data
		.sink_startofpacket (router_032_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_032_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_030_src0_data),                        //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_demux rsp_demux_031 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                           //      sink.ready
		.sink_channel       (router_033_src_channel),                         //          .channel
		.sink_data          (router_033_src_data),                            //          .data
		.sink_startofpacket (router_033_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_033_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_031_src0_data),                        //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                        //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                        //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                       //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                        //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                       //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                        //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                       //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                        //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                 //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                       //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                        //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                 //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                       //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                       //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                     //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                        //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                 //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                       //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                       //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                     //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                        //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                 //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                       //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                       //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                     //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                        //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                 //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                       //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                       //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                     //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                        //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),               //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                 //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                       //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                       //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                     //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                        //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),               //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                 //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                       //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                       //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                     //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                        //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),               //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                 //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                       //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                       //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                     //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                        //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),               //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                 //          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),                       //    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),                       //          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),                     //          .channel
		.sink27_data          (rsp_demux_027_src0_data),                        //          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),               //          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket),                 //          .endofpacket
		.sink28_ready         (rsp_demux_028_src0_ready),                       //    sink28.ready
		.sink28_valid         (rsp_demux_028_src0_valid),                       //          .valid
		.sink28_channel       (rsp_demux_028_src0_channel),                     //          .channel
		.sink28_data          (rsp_demux_028_src0_data),                        //          .data
		.sink28_startofpacket (rsp_demux_028_src0_startofpacket),               //          .startofpacket
		.sink28_endofpacket   (rsp_demux_028_src0_endofpacket),                 //          .endofpacket
		.sink29_ready         (rsp_demux_029_src0_ready),                       //    sink29.ready
		.sink29_valid         (rsp_demux_029_src0_valid),                       //          .valid
		.sink29_channel       (rsp_demux_029_src0_channel),                     //          .channel
		.sink29_data          (rsp_demux_029_src0_data),                        //          .data
		.sink29_startofpacket (rsp_demux_029_src0_startofpacket),               //          .startofpacket
		.sink29_endofpacket   (rsp_demux_029_src0_endofpacket),                 //          .endofpacket
		.sink30_ready         (rsp_demux_030_src0_ready),                       //    sink30.ready
		.sink30_valid         (rsp_demux_030_src0_valid),                       //          .valid
		.sink30_channel       (rsp_demux_030_src0_channel),                     //          .channel
		.sink30_data          (rsp_demux_030_src0_data),                        //          .data
		.sink30_startofpacket (rsp_demux_030_src0_startofpacket),               //          .startofpacket
		.sink30_endofpacket   (rsp_demux_030_src0_endofpacket),                 //          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                       //    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                       //          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                     //          .channel
		.sink31_data          (rsp_demux_031_src0_data),                        //          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),               //          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket)                  //          .endofpacket
	);

	sram_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_003_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_003_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (43),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (52),
		.IN_PKT_BYTE_CNT_L             (50),
		.IN_PKT_TRANS_COMPRESSED_READ  (44),
		.IN_PKT_TRANS_WRITE            (46),
		.IN_PKT_BURSTWRAP_H            (55),
		.IN_PKT_BURSTWRAP_L            (53),
		.IN_PKT_BURST_SIZE_H           (58),
		.IN_PKT_BURST_SIZE_L           (56),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (49),
		.IN_PKT_BURST_TYPE_H           (60),
		.IN_PKT_BURST_TYPE_L           (59),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_0_avalon_sram_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (router_003_src_valid),                                         //      sink.valid
		.in_channel           (router_003_src_channel),                                       //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                   //          .endofpacket
		.in_ready             (router_003_src_ready),                                         //          .ready
		.in_data              (router_003_src_data),                                          //          .data
		.out_endofpacket      (sram_0_avalon_sram_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_0_avalon_sram_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_0_avalon_sram_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_0_avalon_sram_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_0_avalon_sram_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_0_avalon_sram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (43),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (52),
		.IN_PKT_BYTE_CNT_L             (50),
		.IN_PKT_TRANS_COMPRESSED_READ  (44),
		.IN_PKT_TRANS_WRITE            (46),
		.IN_PKT_BURSTWRAP_H            (55),
		.IN_PKT_BURSTWRAP_L            (53),
		.IN_PKT_BURST_SIZE_H           (58),
		.IN_PKT_BURST_SIZE_L           (56),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (49),
		.IN_PKT_BURST_TYPE_H           (60),
		.IN_PKT_BURST_TYPE_L           (59),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                           //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_005_src_valid),                                    //      sink.valid
		.in_channel           (router_005_src_channel),                                  //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_005_src_ready),                                    //          .ready
		.in_data              (router_005_src_data),                                     //          .data
		.out_endofpacket      (onchip_memory2_0_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (43),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (52),
		.OUT_PKT_BYTE_CNT_L            (50),
		.OUT_PKT_TRANS_COMPRESSED_READ (44),
		.OUT_PKT_BURST_SIZE_H          (58),
		.OUT_PKT_BURST_SIZE_L          (56),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (49),
		.OUT_PKT_BURST_TYPE_H          (60),
		.OUT_PKT_BURST_TYPE_L          (59),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_0_avalon_sram_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                        //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                      //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                        //          .ready
		.in_data              (cmd_mux_001_src_data),                                         //          .data
		.out_endofpacket      (sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_0_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_0_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_0_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_0_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (43),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (52),
		.OUT_PKT_BYTE_CNT_L            (50),
		.OUT_PKT_TRANS_COMPRESSED_READ (44),
		.OUT_PKT_BURST_SIZE_H          (58),
		.OUT_PKT_BURST_SIZE_L          (56),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (49),
		.OUT_PKT_BURST_TYPE_H          (60),
		.OUT_PKT_BURST_TYPE_L          (59),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (32),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                           //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                   //          .ready
		.in_data              (cmd_mux_003_src_data),                                    //          .data
		.out_endofpacket      (onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (sram_0_avalon_sram_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                        //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_0_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_0_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_0_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_1_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_1_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_1_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_2_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_2_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_2_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_3_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_3_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_3_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_4_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_4_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_4_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_5_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_5_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_5_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_6_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_6_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_6_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_7_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_7_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_7_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_8_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_8_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_8_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_9_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (row_9_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (row_9_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_11_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_11_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_11_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_12_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_12_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_12_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_13_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_13_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_13_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_14_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_14_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_14_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_15_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_15_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_15_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_16_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_16_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_16_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_17_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_17_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_17_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_18_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_18_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_18_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_19_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_19_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_19_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_20_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_20_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_20_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_21_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_21_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_21_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_22_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_22_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_22_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_23_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_23_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_23_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (row_10_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (row_10_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (row_10_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (move_left_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (move_left_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (move_left_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (move_right_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (move_right_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (move_right_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rotate_left_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (rotate_left_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (rotate_left_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)               //         .error
	);

	sram_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rotate_right_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (rotate_right_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (rotate_right_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)               //         .error
	);

endmodule
